function dst_gui
% Brief explanation =======================================================
% This script is structured in the following way
% 1. Initialization
% 2. Callbacks
% 3. Help Functions

% About Important Variables
% Set: this is the struct with all the variables in string format. This is
% used within the ui script to save and preset etc.
% h: This is a struct containing all the handles for all the controls.

% About the Initialization of Layout and Controls:
% this part constitutes most of the lines in this script.
% During the initialization phase, both controls and layout is contructed, the
% layot is typically based on values from elements that they build on.
% The elements build on each other from top left to bottom right.


% Global metrics ==========================================================
% Figure
lFigWidth = 500; lFigHeight = 900;
% Margin metric
lMargin = 10;
lAlignEditText = 22;
% Panel Metrics
lNextRow = 45;
lMultiLineAdjust3 = 10;
lMultiLineAdjust2 = 5;
lPanelEdge = 67;
lPanelWidth = lFigWidth*0.35;
% Text metrics
lTextWidth = 80;
lTextHeight = 40;

% figure and title ========================================================
f = figure('Visible','off','Units','pixels',...
           'Position',[340,80,lFigWidth,lFigHeight],'menubar','none');

global Set
global presetFiles presetList
global SimParam EcoParam PvParam BattParam InvParam SimData



% Title
lTitleHeight = 30;
lTitleWidth = 300;
lTitleStartY = lFigHeight - lMargin- lTitleHeight;
uicontrol(f,'Style','text','String','Development Support Tool',...
           'Units','pixels','HorizontalAlignment','Left',...
           'FontSize',16,...
           'Position', [lMargin, lTitleStartY,...
            lTitleWidth, lTitleHeight]);


%% Presets ================================================================
% contructs a uicontrol popup menu which keep track of .mat files in the
% functions/GUI/presets folder. Can save and delete files with the GUI.

lPresetX = lPanelWidth*2+lMargin*1.7;
lPresetWidth = lPanelWidth*0.7;
lPresetTitleHeight = 0.7*lTitleHeight;
lPresetTitleY = lTitleStartY - lMargin- lPresetTitleHeight;

uicontrol(f, 'Style','text','String','Presets:',...
             'Units','pixels',...
             'HorizontalAlignment','Left',...
             'Fontsize',14,...
             'Position',[lPresetX,lPresetTitleY,...
             lPresetWidth,lPresetTitleHeight]);

lPresetMenuHeight = 18;
lPresetsMenuY = lPresetTitleY - lMargin - lPresetMenuHeight;
h.PresetsMenu = uicontrol(f, 'Style','popup',...
                         'String',presetList,...
                         'Units','pixels',...
                         'Position',[lPresetX,...
                         lPresetsMenuY, ...
                         lPresetWidth, lPresetMenuHeight],...
                         'Callback', @presetsMenu_Callback);
              
lNewPresetHeaderY = lPresetsMenuY - lMargin*1.5 - lPresetMenuHeight;
uicontrol(f, 'Style','text','String','New Preset:',...
             'Units','pixels',...
             'HorizontalAlignment','Left',...
             'Fontsize',12,...
             'Position',[lPresetX,lNewPresetHeaderY,...
             lPresetWidth,lPresetTitleHeight]);                     

lNewPresetNameY = lNewPresetHeaderY - lPresetMenuHeight - lMargin;
h.NewPresetName = uicontrol(f,'Style','edit','String','default',...
                           'Units','pixels',...
                           'Position',[lPresetX,lNewPresetNameY,...
                           lPresetWidth,lPresetMenuHeight],...
                           'HorizontalAlignment','Left');
                       
lSavePresetBtnY = lNewPresetNameY - lPresetMenuHeight - lMargin;
h.SavePresetBtn = uicontrol(f, 'Style', 'pushbutton', 'String' , 'Save',...
                              'Units', 'pixels',...
                              'Position', [lPresetX, lSavePresetBtnY,...
                              lPresetWidth, lPresetMenuHeight],...
                              'Callback', @savePresetBtn_Callback,...
                              'BackgroundColor',[206 255 213]/255);
 
lDeletePresetBtnY = lSavePresetBtnY - lPresetMenuHeight - lMargin;
h.DeletePresetBtn = uicontrol(f, 'Style', 'pushbutton', 'String' , 'Delete',...
                              'Units', 'pixels',...
                              'Position', [lPresetX, lDeletePresetBtnY,...
                              lPresetWidth, lPresetMenuHeight],...
                              'Callback', @deletePresetBtn_Callback,...
                              'BackgroundColor',[255 206 206]/255);
                          

update_presets_menu
  
%% Calculation Control ====================================================
% Here are the layot and control handles for the controls that allow users
% to run calculations and simulations with the parameters chosen.

% Sapv Simulation
lSimControlTitleHeight = 2*lPresetTitleHeight;
lSimControlTitleY = lDeletePresetBtnY - lSimControlTitleHeight- lMargin;
uicontrol(f, 'Style','text','String','Run Calculations:',...
             'Units','pixels',...
             'HorizontalAlignment','Left',...
             'Fontsize',14,...
             'Position',[lPresetX,lSimControlTitleY,...
             lPresetWidth,lSimControlTitleHeight]);

lRunAllBtnHeight = 40;
lAllModulesBtnY = lSimControlTitleY - lRunAllBtnHeight - 1.5*lMargin;
h.RunAllModulesBtn = uicontrol(f, 'Style', 'pushbutton', 'String' , 'Run All Modules',...
                              'Units', 'pixels',...
                              'Position', [lPresetX, lAllModulesBtnY,...
                              lPresetWidth, lRunAllBtnHeight],...
                              'Callback', @runAllModules_Callback,...
                              'BackgroundColor',[252 243 207]/255);     
         
lRunSingleBtnHeight = 0.5*lRunAllBtnHeight;
lRunSapvSimBtnY = lAllModulesBtnY - lRunSingleBtnHeight - lMargin;
h.RunSapvSimBtn = uicontrol(f, 'Style', 'pushbutton', 'String' , 'Run Sapv Simulation',...
                              'Units', 'pixels',...
                              'Position', [lPresetX, lRunSapvSimBtnY,...
                              lPresetWidth, lRunSingleBtnHeight],...
                              'Callback', @runSapvSim_Callback,...
                              'BackgroundColor',[225 251 255]/255);
                          
% Eco Analysis
lRunEcoAnalysisBtnY = lRunSapvSimBtnY - lRunSingleBtnHeight - lMargin;
h.RunEcoAnalysisBtn = uicontrol(f, 'Style', 'pushbutton', 'String' , 'Run Eco Analysis',...
                              'Units', 'pixels',...
                              'Position', [lPresetX, lRunEcoAnalysisBtnY,...
                              lPresetWidth, lRunSingleBtnHeight],...
                              'Callback', @runEcoAnalysis_Callback,...
                              'BackgroundColor',[204 232 255]/255);
                          
lFindOptimalSolutionBtnY = lRunEcoAnalysisBtnY - lRunSingleBtnHeight - lMargin;
h.RunOptSolBtn = uicontrol(f, 'Style', 'pushbutton', 'String' , 'Find Optimal Solutions',...
                              'Units', 'pixels',...
                              'Position', [lPresetX, lFindOptimalSolutionBtnY,...
                              lPresetWidth, lRunSingleBtnHeight],...
                              'Callback', @runOptSol_Callback,...
                              'BackgroundColor',[179 204 255]/255);
    
%% Launch Analysis Tool ===================================================
% when you have generated the data needed, you can explore the solutions
% further by opening the solution_explorer with this control.

% title
lSolutionExplorerTitleY = lFindOptimalSolutionBtnY - lSimControlTitleHeight- 1.5*lMargin;
uicontrol(f, 'Style','text','String','Solution Explorer:',...
             'Units','pixels',...
             'HorizontalAlignment','Left',...
             'Fontsize',14,...
             'Position',[lPresetX,lSolutionExplorerTitleY,...
             lPresetWidth,lSimControlTitleHeight]);

lRunSolutionExplorerBtnHeight = 60;
lRunSolutionExplorerBtnY = lSolutionExplorerTitleY - lRunSolutionExplorerBtnHeight - 1.5*lMargin;
h.RunSolutionExplorer = uicontrol(f, 'Style', 'pushbutton', 'String' , 'Run Solution Explorer',...
                              'Units', 'pixels',...
                              'Position', [lPresetX, lRunSolutionExplorerBtnY,...
                              lPresetWidth, lRunSolutionExplorerBtnHeight],...
                              'Callback', @runSolutionExplorer_Callback,...
                              'BackgroundColor',[206 255 213]/255);     
         
                          
                          
        
%% Panels and parameter Input =============================================
% this entire section is an initialization of the panels and their texts
% and edit fields for inputing parameters.
% Worth noting: 
% - The metrics are dependant on eachother, if you wish to change the
% layout, try to play with the different metrics to see if you can find
% some metrics that cascade the way you wish. In most cases you will just
% have to figure out what metrics build on previous metrics and change
% these.
% SimPar Panel
lNumberOfSimPar = 9;
lSimParPanelHeight = lNextRow*(lNumberOfSimPar)+lPanelEdge;
lSimParPanelY = lTitleStartY - lMargin- lSimParPanelHeight;

h.SimParamPanel = uipanel(f,'Title','Sim Parameters',...
                'Units','pixels',...
                'Position',[lMargin,lSimParPanelY ,lPanelWidth,lSimParPanelHeight]);

lTextY = lSimParPanelHeight-lPanelEdge;
lTextX = lMargin;

lEditWidth = 0.3*lPanelWidth;
lEditHeight = 18;
lEditX = lPanelWidth-lMargin-lEditWidth;
lEditY = lTextY+lAlignEditText;

% PV
uicontrol(h.SimParamPanel,'Style','text','String','PV start [kW]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');
h.PvStart = uicontrol(h.SimParamPanel,'Style','edit','String',Set.pvStartKw,...
                    'Units','pixels',...
                    'Position',[lEditX,lEditY,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                
uicontrol(h.SimParamPanel,'Style','text','String','PV stop [kW]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY - lNextRow,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');
h.PvStop = uicontrol(h.SimParamPanel,'Style','edit','String',Set.pvStopKw,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                               
uicontrol(h.SimParamPanel,'Style','text','String','PV step [kW]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY - lNextRow*2,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');
h.PvStep = uicontrol(h.SimParamPanel,'Style','edit','String',Set.pvStepKw,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*2,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');  

% Batt
uicontrol(h.SimParamPanel,'Style','text','String','Batt start [kWh]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY - lNextRow*3,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');
h.BattStart = uicontrol(h.SimParamPanel,'Style','edit','String',Set.battStartKwh,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*3,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');  

                
uicontrol(h.SimParamPanel,'Style','text','String','Batt stop [kWh]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY - lNextRow*4,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');
h.BattStop = uicontrol(h.SimParamPanel,'Style','edit','String',Set.battStopKwh,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*4,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');

uicontrol(h.SimParamPanel,'Style','text','String','Batt step [kWh]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY - lNextRow*5,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');
h.BattStep = uicontrol(h.SimParamPanel,'Style','edit','String',Set.battStepKwh,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*5,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');

% LLP
uicontrol(h.SimParamPanel,'Style','text','String','Llp Acceptance [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY - lNextRow*6,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');
h.LlpAccept = uicontrol(h.SimParamPanel,'Style','edit','String',Set.llpAccept,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*6,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');

uicontrol(h.SimParamPanel,'Style','text','String','LLP start [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY - lNextRow*7,...
                     lTextWidth,lTextHeight],...
                     'HorizontalAlignment', 'Left');
h.LlpStart = uicontrol(h.SimParamPanel,'Style','edit','String',Set.llpStart,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*7,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
           
uicontrol(h.SimParamPanel,'Style','text','String','LLP stop [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY - lNextRow*8,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');
h.LlpStop = uicontrol(h.SimParamPanel,'Style','edit','String',Set.llpStop,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*8,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');

uicontrol(h.SimParamPanel,'Style','text','String','LLP step [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY - lNextRow*9,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');
h.LlpStep = uicontrol(h.SimParamPanel,'Style','edit','String',Set.llpStep,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*9,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');


% % Battery Parameter Panel
lNumberOfBattPar = 6; 
lBattParPanelHeight = lNextRow*(lNumberOfBattPar)+20;
lBattPanelStartY = lSimParPanelY - lBattParPanelHeight;
h.BattParamPanel = uipanel(f,'Title','Battery Parameters',...
                  'Units','pixels',...
                  'Position',[lMargin,lBattPanelStartY,...
                  lPanelWidth, lBattParPanelHeight]);   
 
lTextY = lBattParPanelHeight-lPanelEdge;
lEditY = lTextY + lAlignEditText;
              
              
uicontrol(h.BattParamPanel,'Style','text','String','Min State Of Charge [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.MinStateOfCharge = uicontrol(h.BattParamPanel,'Style','edit','String',...
                    Set.minStateOfCharge,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
          
uicontrol(h.BattParamPanel,'Style','text','String','Initial State Of Charge [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY- lNextRow + lMultiLineAdjust2,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.InitialStateOfCharge = uicontrol(h.BattParamPanel,'Style','edit','String',...
                    Set.initialStateOfCharge,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');

uicontrol(h.BattParamPanel,'Style','text','String','Charging Efficiency [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY- lNextRow*2 + lMultiLineAdjust2,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.ChargingEfficiency = uicontrol(h.BattParamPanel,'Style','edit','String',...
                    Set.chargingEfficiency,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*2,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');

uicontrol(h.BattParamPanel,'Style','text','String','Discharging Efficiency [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY- lNextRow*3 + lMultiLineAdjust2,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.DischargingEfficiency = uicontrol(h.BattParamPanel,'Style','edit','String',...
                    Set.dischargingEfficiency,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*3,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');

uicontrol(h.BattParamPanel,'Style','text','String','Power-Energy Ratio',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY- lNextRow*4 + lMultiLineAdjust2,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.PowerEnergyRatio = uicontrol(h.BattParamPanel,'Style','edit','String',...
                    Set.powerEnergyRatio,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*4,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                
uicontrol(h.BattParamPanel,'Style','text','String','Max Operational Years',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY- lNextRow*5 + lMultiLineAdjust2,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.MaxOperationalYears = uicontrol(h.BattParamPanel,'Style','edit','String',...
                    Set.maxOperationalYears,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*5,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                


% % Economic Parameters Panel
lNumberOfEcoPar = 8;
lEcoParPanelHeight = lNextRow*(lNumberOfEcoPar)+lPanelEdge;
lEcoParPanelY = lTitleStartY - lMargin- lEcoParPanelHeight;
h.EcoParamPanel = uipanel(f,'Title','Economic Parameters',...
                  'Units','pixels',...
                  'Position',[lMargin + lPanelWidth,...
                  lEcoParPanelY,lPanelWidth, lEcoParPanelHeight]);
              
lTextY = lEcoParPanelHeight-lPanelEdge;
lEditY = lTextY + lAlignEditText;

uicontrol(h.EcoParamPanel,'Style','text','String','Budget',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.Budget= uicontrol(h.EcoParamPanel,'Style','edit','String',Set.budget,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                

uicontrol(h.EcoParamPanel,'Style','text','String','PV cost [/kW]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY-lNextRow,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.PvCost= uicontrol(h.EcoParamPanel,'Style','edit','String',Set.pvCostKw,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY-lNextRow,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                

uicontrol(h.EcoParamPanel,'Style','text','String','Batt cost [/kWh]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY-lNextRow*2,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.BattCost= uicontrol(h.EcoParamPanel,'Style','edit','String',Set.battCostKwh,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY-lNextRow*2,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                

uicontrol(h.EcoParamPanel,'Style','text','String','Batt cost fixed',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY-lNextRow*3,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.BattCostFix= uicontrol(h.EcoParamPanel,'Style','edit','String',Set.battCostFixed,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY-lNextRow*3,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                

uicontrol(h.EcoParamPanel,'Style','text','String','Inverter Cost [\kW]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY-lNextRow*4 + lMultiLineAdjust2,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.InverterCost= uicontrol(h.EcoParamPanel,'Style','edit',...
                    'String',Set.inverterCostKw,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY-lNextRow*4,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                

uicontrol(h.EcoParamPanel,'Style','text','String','Operation and Maintenance cost [/kW]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY-lNextRow*5 + lMultiLineAdjust3,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.OperationMaintenanceCost= uicontrol(h.EcoParamPanel,'Style','edit',...
                    'String',Set.operationMaintenanceCostKw,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY-lNextRow*5,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                

uicontrol(h.EcoParamPanel,'Style','text','String','Installation and Balance of System [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY-lNextRow*6 + lMultiLineAdjust3 ,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.InstallBalanceOfSystemCost= uicontrol(h.EcoParamPanel,'Style','edit',...
                    'String',Set.installBalanceOfSystemCost,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY-lNextRow*6,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                
                
uicontrol(h.EcoParamPanel,'Style','text','String','Plant Lifetime [years]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY-lNextRow*7 + lMultiLineAdjust2,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.PlantLifetime = uicontrol(h.EcoParamPanel,'Style','edit',...
                    'String',Set.plantLifetime,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY-lNextRow*7,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                
uicontrol(h.EcoParamPanel,'Style','text','String','Interest rate [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY-lNextRow*8,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.InterestRate = uicontrol(h.EcoParamPanel,'Style','edit','String',Set.interestRate,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY-lNextRow*8,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                
                
                
                
% % PV Parameters Panel
lNumberOfPvPar = 5;
lPvParPanelHeight = lNextRow*(lNumberOfPvPar)+ 12;
lPvPanelStartY = lEcoParPanelY - lPvParPanelHeight;
h.PvParamPanel = uipanel(f,'Title','PV Parameters',...
                  'Units','pixels',...
                  'Position',[lMargin + lPanelWidth,...
                  lPvPanelStartY,lPanelWidth, lPvParPanelHeight]);
              
lTextY = lPvParPanelHeight-lPanelEdge;
lEditY = lTextY + lAlignEditText;

uicontrol(h.PvParamPanel,'Style','text','String','Balance Of System [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.BalanceOfSystem = uicontrol(h.PvParamPanel,'Style','edit','String',...
                    Set.balanceOfSystem,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');
                
uicontrol(h.PvParamPanel,'Style','text','String','Nominal Ambient Temperature [C]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY- lNextRow+ lMultiLineAdjust3,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.NominalAmbientTemp = uicontrol(h.PvParamPanel,'Style','edit','String',...
                    Set.nominalAmbientTemperatureC,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');

uicontrol(h.PvParamPanel,'Style','text','String','Nominal Cell Temperature [C]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY- lNextRow*2 + lMultiLineAdjust2,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.NominalCellTemp = uicontrol(h.PvParamPanel,'Style','edit','String',...
                    Set.nominalCellTemperatureC,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*2,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');

uicontrol(h.PvParamPanel,'Style','text','String','Nominal Irradiation [kW/m^2]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY- lNextRow*3 + lMultiLineAdjust3,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.NominalIrradiation = uicontrol(h.PvParamPanel,'Style','edit','String',...
                    Set.nominalIrradiation,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*3,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');


uicontrol(h.PvParamPanel,'Style','text','String','Power Derate Due Temp [/C]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY- lNextRow*4 + lMultiLineAdjust2,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.PowerDerateDueTemp = uicontrol(h.PvParamPanel,'Style','edit','String',...
                    Set.powerDerateDueTemperature,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY - lNextRow*4,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');


% Inverter Parameter Panel
lInvParPanelHeight = lNextRow+ lMargin*2;
lInvPanelStartY = lPvPanelStartY - lInvParPanelHeight;
h.InvParamPanel = uipanel(f,'Title','Inverter Parameters',...
                  'Units','pixels',...
                  'Position',[lMargin+ lPanelWidth,lInvPanelStartY,...
                  lPanelWidth, lInvParPanelHeight]);   
 
lTextY = lInvParPanelHeight-lPanelEdge;
lEditY = lTextY + lAlignEditText;

uicontrol(h.InvParamPanel,'Style','text','String','Efficiency [%]',...
                    'Units','pixels',...
                    'Position',[lTextX,lTextY,...
                     lTextWidth,lTextHeight],...
                    'HorizontalAlignment', 'Left');               
h.InvEfficiency = uicontrol(h.InvParamPanel,'Style','edit','String',...
                    Set.invEfficiency,...
                    'Units','pixels',...
                    'Position',[lEditX, lEditY,...
                     lEditWidth,lEditHeight],...
                    'HorizontalAlignment','Center');            

% InData Panel
lInDataPanelHeight = lNextRow*2-10;
lNextRow = 0.65*lNextRow;
lInDataPanelWidth = lFigWidth-lMargin*2;
lInDataPanelY = lBattPanelStartY - lInDataPanelHeight;
h.InDataPanel = uipanel(f,'Title','Input Data Files',...
                  'Units','pixels',...
                  'Position',[lMargin,lInDataPanelY,...
                   lInDataPanelWidth , lInDataPanelHeight]);   

lInDataTextWidth = 0.2*lInDataPanelWidth;           
lEditX = lMargin + lInDataTextWidth;
lInDataEditWidth = 0.26*lInDataPanelWidth;

%LoadProfileData text and edit
lLoadProfileDataTextY = lInDataPanelHeight - lPanelEdge+5;
lLoadProfileDataEditY = lLoadProfileDataTextY + lAlignEditText;
uicontrol(h.InDataPanel,'Style', 'text', 'String', 'Load Data Filename',...
                        'Units', 'pixels', ...
                        'Position', [lMargin, lLoadProfileDataTextY,...
                                     lInDataTextWidth, lTextHeight],...
                        'HorizontalAlignment','Left');
h.LoadProfileData = uicontrol(h.InDataPanel,'Style','edit','String',...
                    Set.LoadProfileData,...
                    'Units','pixels',...
                    'Position',[lEditX, lLoadProfileDataEditY,...
                                lInDataEditWidth,lEditHeight],...
                    'HorizontalAlignment','Left');

%IrradiationDataText and edit
lIrradiationDataTextY = lLoadProfileDataTextY - lNextRow;
lIrradiationDataEditY = lLoadProfileDataEditY - lNextRow;
uicontrol(h.InDataPanel,'Style', 'text', 'String', 'Temperature Data Filename',...
                        'Units', 'pixels', ...
                        'Position', [lMargin, lIrradiationDataTextY + lMultiLineAdjust2,...
                                     lInDataTextWidth, lTextHeight],...
                        'HorizontalAlignment', 'Left')
h.IrradiationData = uicontrol(h.InDataPanel,'Style','edit','String',...
                    Set.IrradiationData,...
                    'Units','pixels',...
                    'Position',[lEditX, lIrradiationDataEditY,...
                                lInDataEditWidth,lEditHeight],...
                    'HorizontalAlignment','Left');

%Temperature text and edit
lInDataNextColumnX = 0.5*lInDataPanelWidth;
lEditX = lInDataNextColumnX + lMargin + lInDataTextWidth;
uicontrol(h.InDataPanel,'Style', 'text', 'String', 'Temperature Data',...
                        'Units', 'pixels', ...
                        'Position', [lInDataNextColumnX, lLoadProfileDataTextY,...
                                     lInDataTextWidth, lTextHeight],...
                    'HorizontalAlignment','Left');
h.TemperatureData = uicontrol(h.InDataPanel,'Style','edit','String',...
                    Set.TemperatureData,...
                    'Units','pixels',...
                    'Position',[lEditX,lLoadProfileDataEditY,...
                                lInDataEditWidth,lEditHeight],...
                    'HorizontalAlignment','Left');

%DataSetFolderName text and edit
uicontrol(h.InDataPanel,'Style', 'text', 'String', 'Data Set',...
                        'Units', 'pixels', ...
                        'Position', [lInDataNextColumnX, lIrradiationDataTextY,...
                                     lInDataTextWidth, lTextHeight],...
                        'HorizontalAlignment', 'Left')
h.DataSetFolderName = uicontrol(h.InDataPanel,'Style','edit',...
                    'String', Set.DataSetFolderName,...
                    'Units','pixels',...
                    'Position',[lEditX, lIrradiationDataEditY,...
                                lInDataEditWidth,lEditHeight],...
                    'HorizontalAlignment','Left');
                
f.Visible = 'on';

%% Callbacks ==============================================================
% Whenever a control is used, the callback function will run.

    % saves the edit fields to a new .mat file
    function savePresetBtn_Callback(src, eventdata)
        Set.pvStartKw = h.PvStart.String;
        Set.pvStopKw = h.PvStop.String;
        Set.pvStepKw = h.PvStep.String;
        Set.battStartKwh = h.BattStart.String;
        Set.battStopKwh = h.BattStop.String;
        Set.battStepKwh = h.BattStep.String;
        Set.llpAccept = h.LlpAccept.String;
        Set.llpStart = h.LlpStart.String;
        Set.llpStop = h.LlpStop.String;
        Set.llpStep = h.LlpStep.String;          
        Set.budget = h.Budget.String;
        Set.pvCostKw = h.PvCost.String ;          
        Set.battCostKwh = h.BattCost.String;             
        Set.battCostFixed = h.BattCostFix.String;             
        Set.inverterCostKw = h.InverterCost.String;          
        Set.operationMaintenanceCostKw = h.OperationMaintenanceCost.String;           
        Set.installBalanceOfSystemCost = h.InstallBalanceOfSystemCost.String;             
        Set.plantLifetime = h.PlantLifetime.String;               
        Set.interestRate = h.InterestRate.String;            
        Set.balanceOfSystem = h.BalanceOfSystem.String;             
        Set.nominalAmbientTemperatureC = h.NominalAmbientTemp.String;              
        Set.nominalCellTemperatureC = h.NominalCellTemp.String;              
        Set.nominalIrradiation = h.NominalIrradiation.String;             
        Set.powerDerateDueTemperature = h.PowerDerateDueTemp.String;              
        Set.minStateOfCharge = h.MinStateOfCharge.String;            
        Set.initialStateOfCharge = h.InitialStateOfCharge.String;            
        Set.chargingEfficiency = h.ChargingEfficiency.String;             
        Set.dischargingEfficiency = h.DischargingEfficiency.String;             
        Set.powerEnergyRatio = h.PowerEnergyRatio.String;              
        Set.maxOperationalYears = h.MaxOperationalYears.String;               
        Set.invEfficiency = h.InvEfficiency.String;
        Set.LoadProfileData = h.LoadProfileData.String;
        Set.IrradiationData = h.IrradiationData.String;
        Set.TemperatureData = h.TemperatureData.String;
        Set.DataSetFolderName = h.DataSetFolderName.String;
       
        presetsPath = get_presets_path;
        fullpath = strcat(presetsPath, h.NewPresetName.String);
        save(fullpath, 'Set')
        h.PresetsMenu.String{length(h.PresetsMenu.String)+1} =...
            strcat(h.NewPresetName.String, '.mat');
        h.PresetsMenu.Value = length(h.PresetsMenu.String);
       
        update_presets_menu

    end
    
    function deletePresetBtn_Callback(src, eventdata)

       presetNames = h.PresetsMenu.String;
       preset = presetNames(h.PresetsMenu.Value);

       presetsPath = get_presets_path;
       fullpath = strcat(presetsPath, preset{1});
       
       delete(fullpath)
       
       update_presets_menu
       update_edits
       
    end

    % Calls when selecting in the presetsMenu popup
    % Preset -> Set
    function presetsMenu_Callback(src, eventdata)
       presetNames = src.String;

       preset = presetNames(src.Value);

       presetsPath = get_presets_path;
       fullpath = strcat(presetsPath, preset{1});
       Set = importdata(fullpath);
       update_edits
       
    end
    
    function runSapvSim_Callback(src, eventdata)
        disp('Sapv Simulation Running...')
        tic
        [SimParam, EcoParam, PvParam, BattParam, InvParam, SimData] ...
        = get_parameter_classes(Set);
     
        parameters_to_workspace(SimParam,EcoParam,PvParam,...
                                BattParam,InvParam,SimData)
     
        evalin('base',['SimOut = sapv_plant_simulation(SimParam,' ...
                                                      'PvParam,' ...
                                                      'BattParam,' ...
                                                      'InvParam, '...
                                                      'SimData);']);
        toc
    end
    
    function runEcoAnalysis_Callback(src, eventdata)
        disp('Economic Analysis Running...')
        tic
        evalin('base',['EcoOut = economic_analysis(SimParam ,' ...
                                                   'BattParam ,' ...
                                                   'InvParam ,' ...
                                                   'SimData, ' ...
                                                   'EcoParam, ' ...
                                                   'SimOut);']);

        toc
    end
    
    function runOptSol_Callback(src, eventdata)
        disp('Optimum Solution Finder Running...')
        tic
        evalin('base',['OptSol = llp_constrained_optimums( SimParam, ' ...
                                                          'SimOut ,' ...
                                                          'EcoOut);']);
        toc
    end
    
    function runAllModules_Callback(src, eventdata)
        disp('Running All Modules...')
        tic
        [SimParam, EcoParam, PvParam, BattParam, InvParam, SimData] ...
         = get_parameter_classes(Set);
        parameters_to_workspace(SimParam,EcoParam,PvParam,...
                                BattParam,InvParam,SimData)
        evalin('base',['SimOut = sapv_plant_simulation(SimParam,' ...
                                                      'PvParam,' ...
                                                      'BattParam,' ...
                                                      'InvParam, '...
                                                      'SimData);']);
        evalin('base',['EcoOut = economic_analysis(SimParam ,' ...
                                                   'BattParam ,' ...
                                                   'InvParam ,' ...
                                                   'SimData, ' ...
                                                   'EcoParam, ' ...
                                                   'SimOut);']);

        evalin('base',['OptSol = llp_constrained_optimums( SimParam, ' ...
                                                          'SimOut ,' ...
                                                          'EcoOut);']);

        toc
    end
    
    function runSolutionExplorer_Callback(~,~)
        
       solution_explorer 
        
    end
%% Help functions =========================================================
% functions that reduce the duplicate code in the script.
    
% Update edits use the global 'Set' struct, and put all it's values in the
% edit fields. (Displays the 'Set' struct on the edit fields)
    function update_edits
        h.PvStart.String = Set.pvStartKw;
        h.PvStop.String = Set.pvStopKw;
        h.PvStep.String = Set.pvStepKw;
        h.BattStart.String = Set.battStartKwh;
        h.BattStop.String = Set.battStopKwh;
        h.BattStep.String = Set.battStepKwh;
        h.LlpAccept.String = Set.llpAccept;
        h.LlpStart.String = Set.llpStart;
        h.LlpStop.String = Set.llpStop;
        h.LlpStep.String = Set.llpStep;          
        h.Budget.String = Set.budget;
        h.PvCost.String = Set.pvCostKw;          
        h.BattCost.String = Set.battCostKwh;             
        h.BattCostFix.String= Set.battCostFixed;             
        h.InverterCost.String = Set.inverterCostKw;          
        h.OperationMaintenanceCost.String = Set.operationMaintenanceCostKw;           
        h.InstallBalanceOfSystemCos.String = Set.installBalanceOfSystemCost;             
        h.PlantLifetime.String = Set.plantLifetime;               
        h.InterestRate.String = Set.interestRate;            
        h.BalanceOfSystem.String = Set.balanceOfSystem;             
        h.NominalAmbientTemp.String = Set.nominalAmbientTemperatureC;              
        h.NominalCellTemp.String = Set.nominalCellTemperatureC;              
        h.NominalIrradiation.String = Set.nominalIrradiation;             
        h.PowerDerateDueTemp.String = Set.powerDerateDueTemperature;              
        h.MinStateOfCharge.String = Set.minStateOfCharge;            
        h.InitialStateOfCharge.String = Set.initialStateOfCharge;            
        h.ChargingEfficiency.String = Set.chargingEfficiency;             
        h.DischargingEfficiency.String = Set.dischargingEfficiency;             
        h.PowerEnergyRatio.String = Set.powerEnergyRatio;              
        h.MaxOperationalYears.String = Set.maxOperationalYears;               
        h.InvEfficiency.String = Set.invEfficiency;
        h.LoadProfileData.String = Set.LoadProfileData;
        h.IrradiationData.String = Set.IrradiationData;
        h.TemperatureData.String = Set.TemperatureData;
        h.DataSetFolderName.String = Set.DataSetFolderName;
    end
    
    % Directory -> Presets
    % Looks in directory and makes a list of the filenames, puts the list
    % into the presets menu popup and sets either the currently displayed
    % preset or the default preset in the 'Set' variable given that the
    % displayed preset still exist
    function update_presets_menu
        valueNotSet = true;       
        presetsPath = get_presets_path;
        presetFiles = dir([presetsPath '*.mat']);
        presetList = cell(1,length(presetFiles));
        for j = 1:length(presetList)
            presetList{j} = presetFiles(j).name;
        end

        % Set the value (the displayed string in the menu)
        % This will trigger if the current displaed preset exists as a file
        if  isempty(h.PresetsMenu.String) == false
            currentDisplay = h.PresetsMenu.String(h.PresetsMenu.Value);
            currentIsInPresetList = strcmp(presetList,currentDisplay);
            if any(currentIsInPresetList)
                i = find(currentIsInPresetList);
                h.PresetsMenu.Value = i;
                valueNotSet = false;
            end
        end
        
        defaultIsInPresetList = strcmp(presetList,'default.mat');
        if any(defaultIsInPresetList) && valueNotSet
            i = find(defaultIsInPresetList);
            h.PresetsMenu.Value = i;
            valueNotSet = false;
        end

        % default was neither in the list nor in directory, we need to make
        % a new default file defined inside this script. 
            % comment: This is not
            % possible through the GUI but may occur if someone delete the file
            % manually, can be nice if one has rewritten the default file to
            % something very incorrect and wish to reset to harcoded
            % default
        if valueNotSet
            Set = init_default_set_values;
            update_edits
            h.NewPresetName.String = 'default';
            
            presetsPath = get_presets_path;
            fullpath = strcat(presetsPath, h.NewPresetName.String);
            save(fullpath, 'Set')
        else
            h.PresetsMenu.String = presetList;
            presetsMenu_Callback(h.PresetsMenu)
        end
    end
        
    % Initialise Set with some default values
    % this happens if there is no default already in the presets directory
    % or if you delete the current existing default.
    function Set = init_default_set_values
        % DEFAULT values 
        % Simulation Default Parameters:
        Set.pvStartKw = '100';
        Set.pvStopKw = '200';
        Set.pvStepKw = '10';
        Set.battStartKwh = '1200';
        Set.battStopKwh = '1300';
        Set.battStepKwh = '10';
        Set.llpAccept = '0.5';
        Set.llpStart = '1';
        Set.llpStop = '80';
        Set.llpStep = '5';

        % Economic Default Parameters
        Set.budget = '1500000';
        Set.pvCostKw = '1000';
        Set.battCostKwh = '140';              
        Set.battCostFixed = '0';             
        Set.inverterCostKw = '500';          
        Set.operationMaintenanceCostKw = '50';
        Set.installBalanceOfSystemCost = '2';%
        Set.plantLifetime = '20';           
        Set.interestRate = '6';%  

        %PV Default Parameters
        Set.balanceOfSystem = '85';  %             
        Set.nominalAmbientTemperatureC = '20';    % Nominal ambient test-temperature of the panels [C]
        Set.nominalCellTemperatureC = '47';        % Nominal Operating Cell Temperature [C]
        Set.nominalIrradiation = '0.8';           % Irradiation at nominal operation [kW / m^2]
        Set.powerDerateDueTemperature = '0.004';  % Derating of panel's power due to temperature [/C]

        % Battery Default Parameters
        Set.minStateOfCharge = '40'; %            
        Set.initialStateOfCharge = '100'; %;             
        Set.chargingEfficiency = '85'; % 
        Set.dischargingEfficiency = '90'; %
        Set.powerEnergyRatio = '0.5'; 
        Set.maxOperationalYears = '5';  

        % Inverter Default Parameters
        Set.invEfficiency = '90';
        
        % Indata Filenames
        Set.LoadProfileData = 'LoadCurve_normalized_single_3percent_100.mat';
        Set.IrradiationData = 'solar_data_Phuntsholing_baseline.mat';
        Set.TemperatureData = 'surface_temp_phuent_2004_hour.mat';
        Set.DataSetFolderName = 'bhutan';

    end
end

% returns the path of the preset folder (where presets are stored)
function presetsPath = get_presets_path
       filename = mfilename();
       localPath = mfilename('fullpath');
       localPath = localPath(1:end-length(filename));
       operating_system = getenv('OS');
       if strcmp(operating_system(1:7), 'Windows')
           presetsPath = strcat(localPath, 'presets\');         
       else
           presetsPath = strcat(localPath, 'presets/');
       end
end

% Convert the strings from the 'Set' struct to
function [SimParam, EcoParam, PvParam, BattParam, InvParam, SimData] = ...
         get_parameter_classes(Set)

    llpRange = str2double(Set.llpStart)/100 ...
              : str2double(Set.llpStep)/100 ...
              : str2double(Set.llpStop)/100;
    
    SimParam = SimulationParameters(str2double(Set.pvStartKw),...
                                    str2double(Set.pvStopKw),...
                                    str2double(Set.pvStepKw),...
                                    str2double(Set.battStartKwh),...
                                    str2double(Set.battStopKwh),...
                                    str2double(Set.battStepKwh),...
                                    str2double(Set.llpAccept)/100,...
                                    llpRange);
                                
    EcoParam = EconomicParameters;
    EcoParam.budget = str2double(Set.budget);
    EcoParam.pvCostKw = str2double(Set.pvCostKw);        
    EcoParam.battCostKwh = str2double(Set.battCostKwh);             
    EcoParam.battCostFixed = str2double(Set.battCostFixed);             
    EcoParam.inverterCostKw = str2double(Set.inverterCostKw);         
    EcoParam.operationMaintenanceCostKw = str2double(Set.operationMaintenanceCostKw);
    EcoParam.installBalanceOfSystemCost = str2double(Set.installBalanceOfSystemCost)/100;
    EcoParam.plantLifetime = str2double(Set.plantLifetime);
    EcoParam.interestRate = str2double(Set.interestRate)/100; 

    PvParam.balanceOfSystem = str2double(Set.balanceOfSystem)/100;            
    PvParam.nominalAmbientTemperatureC = str2double(Set.nominalAmbientTemperatureC);              
    PvParam.nominalCellTemperatureC = str2double(Set.nominalCellTemperatureC);              
    PvParam.nominalIrradiation = str2double(Set.nominalIrradiation);             
    PvParam.powerDerateDueTemperature = str2double(Set.powerDerateDueTemperature); 
    
    BattParam = BatteryParameters;
    BattParam.minStateOfCharge = str2double(Set.minStateOfCharge)/100;            
    BattParam.initialStateOfCharge = str2double(Set.initialStateOfCharge)/100;            
    BattParam.chargingEfficiency = str2double(Set.chargingEfficiency)/100;             
    BattParam.dischargingEfficiency = str2double(Set.dischargingEfficiency)/100;             
    BattParam.powerEnergyRatio = str2double(Set.powerEnergyRatio);              
    BattParam.maxOperationalYears = str2double(Set.maxOperationalYears);   
    
    InvParam.efficiency = str2double(Set.invEfficiency)/100;
    
    SimData = SimulationInputData( Set.LoadProfileData,...
                                   Set.IrradiationData,...
                                   Set.TemperatureData,...
                                   Set.DataSetFolderName);

                               
end


function parameters_to_workspace(SimParam,EcoParam,PvParam,BattParam,InvParam,SimData)
    assignin('base','SimParam',SimParam)
    assignin('base','EcoParam',EcoParam)
    assignin('base','PvParam',PvParam)
    assignin('base','BattParam',BattParam)
    assignin('base','InvParam',InvParam)
    assignin('base','SimData',SimData) 
end


