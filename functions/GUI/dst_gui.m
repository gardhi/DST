function dst_gui
clear variables
% Brief explanation =======================================================
% This script is structured in the following way
% 1. Initialization
% 2. Callbacks
% 3. Help Functions

% About Important Variables
% Set: this is the struct with all the variables in string format. This is
% used within the ui script to save and preset etc.
% h: This is a struct containing all the handles for all the controls.

% About the Initialization of Layout and Controls:
% this part constitutes most of the lines in this script.
% During the initialization phase, both controls and layout is contructed, the
% layot is typically based on values from elements that they build on.
% The elements build on each other from top left to bottom right.


% Global metrics ==========================================================
% Figure
lFigWidth = 680; lFigHeight = 940;
% Margin metric
lMargin = 10;
lAlignEditText = 22;
% Panel Metrics
lNextRow = 45;
lMultiLineAdjust3 = 10;
lMultiLineAdjust2 = 5;
lPanelEdge = 67;
lPanelWidth = lFigWidth*0.25;
% Text metrics
lTextWidth = 80;
lTextSingleHeight = 40;

% figure and title ========================================================
f = figure('Visible','off','Units','pixels',...
           'Position',[340,80,lFigWidth,lFigHeight],'menubar','none');

global Set h
global presetFiles presetList
global SimParam EcoParam PvParam BattParam InvParam SimData BiomParam

construct_figure
update_presets_menu

f.Visible = 'on';

%% Callbacks ==============================================================
% Whenever a control is used, the callback function will run.

    function simulationOverviw_Callback(~ , ~)

        evalin('base','simulation_overview(SimOut,EcoOut)')
        
    end


    function updateIterationTrackerBtn_Callback(~, ~)
        
        populate_set
        set_iteration_tracker_string
        
    end


    function helpBtn_Callback(~, ~)
        
        web('http://folk.ntnu.no/gardhi/dstReferenceManual/referenceManual.html')
        
        
    end


    % saves the edit fields to a new .mat file
    function savePresetBtn_Callback(~, ~)

        populate_set
        
        presetsPath = get_presets_path;
        fullpath = strcat(presetsPath, h.NewPresetName.String);
        save(fullpath, 'Set')
        h.PresetsMenu.String{length(h.PresetsMenu.String)+1} =...
            strcat(h.NewPresetName.String, '.mat');
        h.PresetsMenu.Value = length(h.PresetsMenu.String);
       
        update_presets_menu

    end
    
    function deletePresetBtn_Callback(~, ~)

       presetNames = h.PresetsMenu.String;
       preset = presetNames(h.PresetsMenu.Value);

       presetsPath = get_presets_path;
       fullpath = strcat(presetsPath, preset{1});
       
       delete(fullpath)
       
       update_presets_menu
       update_edits
       
    end

    % Calls when selecting in the presetsMenu popup
    % Preset -> Set
    function presetsMenu_Callback(src, ~)
       presetNames = src.String;

       preset = presetNames(src.Value);

       presetsPath = get_presets_path;
       fullpath = strcat(presetsPath, preset{1});
       Set = importdata(fullpath);
       update_edits
       set_iteration_tracker_string
       
    end
    
    function runPlantSim_Callback(~, ~)  
        disp('Plant Simulation Running...')

        runbutton_pressed('Sim')
        
    end
    
    function runEcoAnalysis_Callback(~, ~)
        disp('Economic Analysis Running...')
        
        runbutton_pressed('eco')
        
    end
    
    function runOptSol_Callback(~, ~)
        
        disp('Optimum Solution Finder Running...')
        
        runbutton_pressed('opt')
        
    end
    
    function runAllModules_Callback(~, ~)
        disp('Running All Modules...')
        
        runbutton_pressed('all')
        
    end
    
    function runSolutionExplorer_Callback(~,~)
        
       solution_explorer 
        
    end
%% Help functions =========================================================
% functions that reduce the duplicate code in the script.

    function runbutton_pressed(button)
        tic
        % make sure Set has all the edit fields
        populate_set
        
        % convert Set to classes
        [SimParam, EcoParam, PvParam, BattParam, InvParam, SimData, BiomParam] ...
        = get_classes(Set);
    
        % put classes into workspace
        parameters_to_workspace(SimParam,EcoParam,PvParam,...
                                BattParam,InvParam,SimData, BiomParam)
       
        
        % run the modules in workspace
        if strcmp(button,'all') || strcmp(button, 'sim')
           if h.CheckBoxBiomass.Value
                evalin('base',['SimOut = pvbiomass_plant_simulation(SimParam,' ...
                                                              'PvParam,' ...
                                                              'BattParam,' ...
                                                              'InvParam, '...
                                                              'SimData, '...
                                                              'BiomParam);']);            

            else
                evalin('base',['SimOut = sapv_plant_simulation(SimParam,' ...
                                                              'PvParam,' ...
                                                              'BattParam,' ...
                                                              'InvParam, '...
                                                              'SimData);']);

           end
        end
        if strcmp(button,'all') || strcmp(button, 'eco')
            
            if h.CheckBoxBiomass.Value
                disp('Running Biomass Economic Analysis..')
                evalin('base',['EcoOut = economic_analysis_biom(' ...
                                                           'SimParam ,' ...
                                                           'BattParam ,' ...
                                                           'InvParam ,' ...
                                                           'SimData, ' ...
                                                           'EcoParam, ' ...
                                                           'SimOut);']);


            else
                evalin('base',['EcoOut = economic_analysis(SimParam ,' ...
                                                           'BattParam ,' ...
                                                           'InvParam ,' ...
                                                           'SimData, ' ...
                                                           'EcoParam, ' ...
                                                           'SimOut);']);
            end
            

        end
        
        if strcmp(button,'all') || strcmp(button, 'opt')          
             
            if h.LlpConstrainedRadioBtn.Value
                evalin('base',['OptSol = llp_constrained_optimums( SimParam,' ...
                                                                  'SimOut,' ...
                                                                  'EcoOut);']);
            elseif h.NpcConstrainedRadioBtn.Value
                evalin('base',['OptSol = npc_constrained_optimums( SimParam,' ...
                                                                  'SimOut,' ...
                                                                  'EcoOut);']);
            elseif h.LcoeConstrainedRadioBtn.Value
                evalin('base',['OptSol = lcoe_optimums( SimParam,' ...
                                                       'SimOut,' ...
                                                       'EcoOut);']);   
            end
            
            
        end
        
        toc
    end
    
    % Update edits use the global 'Set' struct, and put all it's values in the
    % edit fields. (Displays the 'Set' struct on the edit fields)
    function populate_set
        Set.pvStartKw = h.PvStart.String;
        Set.pvStopKw = h.PvStop.String;
        Set.pvStepKw = h.PvStep.String;
        Set.battStartKwh = h.BattStart.String;
        Set.battStopKwh = h.BattStop.String;
        Set.battStepKwh = h.BattStep.String;
        Set.llpAccept = h.LlpAccept.String;
        Set.llpStart = h.LlpStart.String;
        Set.llpStop = h.LlpStop.String;
        Set.llpStep = h.LlpStep.String; 
        Set.npcAccept = h.NpcAccept.String;
        Set.npcStart = h.NpcStart.String;
        Set.npcStop = h.NpcStop.String;
        Set.npcStep = h.NpcStep.String;         
        Set.budget = h.Budget.String;
        Set.pvCostKw = h.PvCost.String ;          
        Set.battCostKwh = h.BattCost.String;             
        Set.battCostFixed = h.BattCostFix.String;             
        Set.inverterCostKw = h.InverterCost.String;          
        Set.operationMaintenanceCostKw = h.OperationMaintenanceCost.String;           
        Set.installBalanceOfSystemCost = h.InstallBalanceOfSystemCost.String;             
        Set.plantLifetimeYears = h.PlantLifetime.String;               
        Set.interestRate = h.InterestRate.String;            
        Set.balanceOfSystem = h.BalanceOfSystem.String;             
        Set.nominalAmbientTemperatureC = h.NominalAmbientTemp.String;              
        Set.nominalCellTemperatureC = h.NominalCellTemp.String;              
        Set.nominalIrradiation = h.NominalIrradiation.String;             
        Set.powerDerateDueTemperature = h.PowerDerateDueTemp.String;              
        Set.minStateOfCharge = h.MinStateOfCharge.String;            
        Set.initialStateOfCharge = h.InitialStateOfCharge.String;            
        Set.chargingEfficiency = h.ChargingEfficiency.String;             
        Set.dischargingEfficiency = h.DischargingEfficiency.String;             
        Set.powerEnergyRatio = h.PowerEnergyRatio.String;              
        Set.maxOperationalYears = h.MaxOperationalYears.String;               
        Set.invEfficiency = h.InvEfficiency.String;
        Set.loadProfileData = h.loadProfileData.String;
        Set.irradiationData = h.irradiationData.String;
        Set.temperatureData = h.temperatureData.String;
        Set.dataSetFolderName = h.dataSetFolderName.String;
        Set.checkBoxBiomass = num2str(h.CheckBoxBiomass.Value);
        Set.isPreemptive = num2str(h.IsPreemptive.Value);
        Set.powerTreshold = h.PowerTreshold.String;
        Set.biomassDeliveredKw = h.BiomassDelivered.String;
        Set.biomassDeliveryIntervalDays = h.BiomassDeliveryInterval.String;
        Set.generatorOutputKw = h.GeneratorOutput.String;
        Set.startupDelayHours = h.StartupDelay.String;
        Set.retryDelayHours = h.RetryDelay.String;
        Set.biomassCostKw = h.BiomassCost.String;
        Set.biomassSystemInvestmentCost = h.BiomassSystemInvestmentCost.String;
        Set.biomassSystemOperationCost = h.biomassSystemOperationCost.String; 
        
    end


    function update_edits
        h.PvStart.String = Set.pvStartKw;
        h.PvStop.String = Set.pvStopKw;
        h.PvStep.String = Set.pvStepKw;
        h.BattStart.String = Set.battStartKwh;
        h.BattStop.String = Set.battStopKwh;
        h.BattStep.String = Set.battStepKwh;
        h.LlpAccept.String = Set.llpAccept;
        h.LlpStart.String = Set.llpStart;
        h.LlpStop.String = Set.llpStop;
        h.LlpStep.String = Set.llpStep;
        h.NpcAccept.String = Set.npcAccept;
        h.NpcStart.String = Set.npcStart;
        h.NpcStop.String = Set.npcStop;
        h.NpcStep.String = Set.npcStep;
        h.Budget.String = Set.budget;
        h.PvCost.String = Set.pvCostKw;          
        h.BattCost.String = Set.battCostKwh;             
        h.BattCostFix.String= Set.battCostFixed;             
        h.InverterCost.String = Set.inverterCostKw;          
        h.OperationMaintenanceCost.String = Set.operationMaintenanceCostKw;           
        h.InstallBalanceOfSystemCost.String = Set.installBalanceOfSystemCost;             
        h.PlantLifetime.String = Set.plantLifetimeYears;               
        h.InterestRate.String = Set.interestRate;            
        h.BalanceOfSystem.String = Set.balanceOfSystem;             
        h.NominalAmbientTemp.String = Set.nominalAmbientTemperatureC;              
        h.NominalCellTemp.String = Set.nominalCellTemperatureC;              
        h.NominalIrradiation.String = Set.nominalIrradiation;             
        h.PowerDerateDueTemp.String = Set.powerDerateDueTemperature;              
        h.MinStateOfCharge.String = Set.minStateOfCharge;            
        h.InitialStateOfCharge.String = Set.initialStateOfCharge;            
        h.ChargingEfficiency.String = Set.chargingEfficiency;             
        h.DischargingEfficiency.String = Set.dischargingEfficiency;             
        h.PowerEnergyRatio.String = Set.powerEnergyRatio;              
        h.MaxOperationalYears.String = Set.maxOperationalYears;               
        h.InvEfficiency.String = Set.invEfficiency;
        h.loadProfileData.String = Set.loadProfileData;
        h.irradiationData.String = Set.irradiationData;
        h.temperatureData.String = Set.temperatureData;
        h.dataSetFolderName.String = Set.dataSetFolderName;
        h.CheckBoxBiomass.Value = str2double(Set.checkBoxBiomass);
        h.IsPreemptive.Value = str2double(Set.isPreemptive);
        h.PowerTreshold.String = Set.powerTreshold;
        h.BiomassDelivered.String = Set.biomassDeliveredKw;
        h.BiomassDeliveryInterval.String = Set.biomassDeliveryIntervalDays;
        h.GeneratorOutput.String = Set.generatorOutputKw;
        h.StartupDelay.String = Set.startupDelayHours;
        h.RetryDelay.String = Set.retryDelayHours;
        h.BiomassCost.String = Set.biomassCostKw;
        h.BiomassSystemInvestmentCost.String = Set.biomassSystemInvestmentCost;
        h.biomassSystemOperationCost.String = Set.biomassSystemOperationCost;
        
        
            
    end
    
    % Directory -> Presets
    % Looks in directory and makes a list of the filenames, puts the list
    % into the presets menu popup and sets either the currently displayed
    % preset or the default preset in the 'Set' variable given that the
    % displayed preset still exist
    function update_presets_menu
        valueNotSet = true;       
        presetsPath = get_presets_path;
        presetFiles = dir([presetsPath '*.mat']);
        presetList = cell(1,length(presetFiles));
        for j = 1:length(presetList)
            presetList{j} = presetFiles(j).name;
        end

        % Set the value (the displayed string in the menu)
        % This will trigger if the current displaed preset exists as a file
        if  isempty(h.PresetsMenu.String) == false
            currentDisplay = h.PresetsMenu.String(h.PresetsMenu.Value);
            currentIsInPresetList = strcmp(presetList,currentDisplay);
            if any(currentIsInPresetList)
                i = find(currentIsInPresetList);
                h.PresetsMenu.Value = i;
                valueNotSet = false;
            end
        end
        
        defaultIsInPresetList = strcmp(presetList,'default.mat');
        if any(defaultIsInPresetList) && valueNotSet
            i = find(defaultIsInPresetList);
            h.PresetsMenu.Value = i;
            valueNotSet = false;
        end

        % default was neither in the list nor in directory, we need to make
        % a new default file defined inside this script. 
            % comment: This is not
            % possible through the GUI but may occur if someone delete the file
            % manually, can be nice if one has rewritten the default file to
            % something very incorrect and wish to reset to harcoded
            % default
        if valueNotSet
            Set = get_dst_set_default;
            update_edits
            h.NewPresetName.String = 'default';
            
            presetsPath = get_presets_path;
            fullpath = strcat(presetsPath, h.NewPresetName.String);
            save(fullpath, 'Set')
        else
            h.PresetsMenu.String = presetList;
            presetsMenu_Callback(h.PresetsMenu)
        end
    end
        
    
    function set_iteration_tracker_string
        nPvSteps = (str2double(Set.pvStopKw)-str2double(Set.pvStartKw)) ...
                 / str2double(Set.pvStepKw) + 1;
        nBattSteps = (str2double(Set.battStopKwh)-str2double(Set.battStartKwh)) ...
                 / str2double(Set.battStepKwh) + 1;
        h.IterationTracker.String = ['(' num2str(nPvSteps) 'x'...
            num2str(nBattSteps) ' = ' num2str(nPvSteps*nBattSteps) ...
            ' simulations)'];
    end
    
    function construct_figure

        % Title
        lTitleHeight = 30;
        lTitleWidth = 300;
        lTitleStartY = lFigHeight - lMargin- lTitleHeight;
        uicontrol(f,'Style','text','String','Development Support Tool',...
                   'Units','pixels','HorizontalAlignment','Left',...
                   'FontSize',16,...
                   'Position', [lMargin, lTitleStartY,...
                    lTitleWidth, lTitleHeight]);


        %% Presets ================================================================
        % contructs a uicontrol popup menu which keep track of .mat files in the
        % functions/GUI/presets folder. Can save and delete files with the GUI.

        lPresetX = lPanelWidth*3+lMargin*1.7;
        lPresetWidth = lPanelWidth*0.85;
        lPresetTitleHeight = 0.7*lTitleHeight;
        lPresetTitleY = lTitleStartY - lMargin- lPresetTitleHeight;

        uicontrol(f, 'Style','text','String','Presets:',...
                     'Units','pixels',...
                     'HorizontalAlignment','Left',...
                     'Fontsize',14,...
                     'Position',[lPresetX,lPresetTitleY,...
                     lPresetWidth,lPresetTitleHeight]);
        lPresetMenuHeight = 18;
        lPresetsMenuY = lPresetTitleY - lMargin - lPresetMenuHeight;
        h.PresetsMenu = uicontrol(f, 'Style','popup',...
                                 'String',presetList,...
                                 'Units','pixels',...
                                 'Position',[lPresetX,...
                                 lPresetsMenuY, ...
                                 lPresetWidth, lPresetMenuHeight],...
                                 'Callback', @presetsMenu_Callback);

        lNewPresetHeaderY = lPresetsMenuY - lMargin*1.5 - lPresetMenuHeight;
        uicontrol(f, 'Style','text','String','New Preset:',...
                     'Units','pixels',...
                     'HorizontalAlignment','Left',...
                     'Fontsize',12,...
                     'Position',[lPresetX,lNewPresetHeaderY,...
                     lPresetWidth,lPresetTitleHeight]);                     

        lNewPresetNameY = lNewPresetHeaderY - lPresetMenuHeight - lMargin;
        h.NewPresetName = uicontrol(f,'Style','edit','String','default',...
                                   'Units','pixels',...
                                   'Position',[lPresetX,lNewPresetNameY,...
                                   lPresetWidth,lPresetMenuHeight],...
                                   'HorizontalAlignment','Left');

        lSavePresetBtnY = lNewPresetNameY - lPresetMenuHeight - lMargin;
        h.SavePresetBtn = uicontrol(f, 'Style', 'pushbutton', 'String' , 'Save',...
                                      'Units', 'pixels',...
                                      'Position', [lPresetX, lSavePresetBtnY,...
                                      lPresetWidth, lPresetMenuHeight],...
                                      'Callback', @savePresetBtn_Callback,...
                                      'BackgroundColor',[206 255 213]/255);

        lDeletePresetBtnY = lSavePresetBtnY - lPresetMenuHeight - lMargin;
        h.DeletePresetBtn = uicontrol(f, 'Style', 'pushbutton',...
                                      'String' , 'Delete',...
                                      'Units', 'pixels',...
                                      'Position', [lPresetX, lDeletePresetBtnY,...
                                      lPresetWidth, lPresetMenuHeight],...
                                      'Callback', @deletePresetBtn_Callback,...
                                      'BackgroundColor',[255 206 206]/255);


        %% Calculation Control ====================================================
        % Here are the layot and control handles for the controls that allow users
        % to run calculations and simulations with the parameters chosen.


        lSimControlTitleHeight = 2*lPresetTitleHeight;
        lSimControlTitleY = lDeletePresetBtnY - lSimControlTitleHeight- lMargin;
        uicontrol(f, 'Style','text','String','Run Calculations:',...
                     'Units','pixels',...
                     'HorizontalAlignment','Left',...
                     'Fontsize',14,...
                     'Position',[lPresetX,lSimControlTitleY,...
                     lPresetWidth,lSimControlTitleHeight]);

        %Choosing a DST run mode:
        lCheckBoxHeight = 15;
        lCheckBoxWidth = lPresetWidth -2*lMargin;
        lPlantChoiceBtnGroupHeight = 3*lCheckBoxHeight;
        lPlantChoiceBtnGroupY = lSimControlTitleY ...
                              - lPlantChoiceBtnGroupHeight ...
                              - lMargin;

        h.PlantChoiceBtnGroup ...
        = uibuttongroup(f,'Title','Generation Strategies',...
                        'Units','Pixels',...
                        'Position',[lPresetX, lPlantChoiceBtnGroupY,...
                        lPresetWidth, lPlantChoiceBtnGroupHeight]);

        h.CheckBoxBiomass...
        = uicontrol(h.PlantChoiceBtnGroup, 'String', 'Biomass',...
                    'Units','Pixels', 'Value',str2double(Set.checkBoxBiomass),...
                    'Position',[lMargin,...
                    lPlantChoiceBtnGroupHeight-2*lMargin-lCheckBoxHeight, ...
                    lCheckBoxWidth, lCheckBoxHeight],...
                    'Style','checkbox');

        %Choosing a DST run mode:
        nRadioBtns = 3;
        lNextRowRadioBtn = 0.75*lNextRow;

        lOptimalSolutionChoicesBtnGroupHeight = lNextRowRadioBtn*nRadioBtns + 2*lMargin;
        lOptimalSolutionChoicesBtnGroupY = lPlantChoiceBtnGroupY ...
                                         - lOptimalSolutionChoicesBtnGroupHeight;

        h.OptimalSolutionChoicesBtnGroup ...
        = uibuttongroup(f,...
                        'Title','Optimal Solution Output',...
                        'Units','Pixels',...
                        'Position',[lPresetX, lOptimalSolutionChoicesBtnGroupY,...
                        lPresetWidth, lOptimalSolutionChoicesBtnGroupHeight]);

        lRadioBtnY = lOptimalSolutionChoicesBtnGroupHeight-4*lMargin;

        h.LlpConstrainedRadioBtn...
        = uicontrol(h.OptimalSolutionChoicesBtnGroup,...
                    'String', 'LLP Constrained',...
                    'Units','Pixels', ...
                    'Value',str2double(Set.checkBoxBiomass),...
                    'Position', ...
                    [lMargin,lRadioBtnY ,lCheckBoxWidth, lCheckBoxHeight],...
                    'Style','radiobutton');
                
        h.NpcConstrainedRadioBtn = uicontrol(h.OptimalSolutionChoicesBtnGroup,...
                                     'String', 'NPC Constrained',...
                                     'Units','Pixels', ...
                                     'Value',str2double(Set.checkBoxBiomass),...
                                     'Position',  ...
                                     [lMargin, lRadioBtnY-lNextRowRadioBtn, ...
                                     lCheckBoxWidth, lCheckBoxHeight],...
                                     'Style','radiobutton');


         h.LcoeConstrainedRadioBtn = uicontrol(h.OptimalSolutionChoicesBtnGroup,...
                                     'String', 'LCoE Constrained',...
                                     'Units','Pixels', ...
                                     'Value',str2double(Set.checkBoxBiomass),...
                                     'Position',  ...
                                     [lMargin, lRadioBtnY-lNextRowRadioBtn*2, ...
                                     lCheckBoxWidth, lCheckBoxHeight],...
                                     'Style','radiobutton');


        %% Executing Modules
        lRunAllBtnHeight = 50;
        lAllModulesBtnY = lOptimalSolutionChoicesBtnGroupY...
                        - lRunAllBtnHeight ...
                        - 1.5*lMargin;
        h.RunAllModulesBtn = uicontrol(f, 'Style', 'pushbutton',...
                                      'String' , 'Run All Modules',...
                                      'Units', 'pixels',...
                                      'Position', [lPresetX, lAllModulesBtnY,...
                                      lPresetWidth, lRunAllBtnHeight],...
                                      'Callback', @runAllModules_Callback,...
                                      'BackgroundColor',[252 243 207]/255);     

        lRunSingleBtnHeight = 0.5*lRunAllBtnHeight;
        lRunPlantSimBtnY = lAllModulesBtnY - lRunSingleBtnHeight - lMargin;
        h.RunPlantSimBtn = uicontrol(f, 'Style', 'pushbutton',...
                                      'String' , 'Run Plant Simulation',...
                                      'Units', 'pixels',...
                                      'Position', [lPresetX, lRunPlantSimBtnY,...
                                      lPresetWidth, lRunSingleBtnHeight],...
                                      'Callback', @runPlantSim_Callback,...
                                      'BackgroundColor',[225 251 255]/255);

        % Eco Analysis
        lRunEcoAnalysisBtnY = lRunPlantSimBtnY - lRunSingleBtnHeight - lMargin;
        h.RunEcoAnalysisBtn = uicontrol(f, 'Style', 'pushbutton',...
                                      'String' , 'Run Economic Analysis',...
                                      'Units', 'pixels',...
                                      'Position', [lPresetX, lRunEcoAnalysisBtnY,...
                                      lPresetWidth, lRunSingleBtnHeight],...
                                      'Callback', @runEcoAnalysis_Callback,...
                                      'BackgroundColor',[204 232 255]/255);

        lFindOptimalSolutionBtnY = lRunEcoAnalysisBtnY...
                                 - lRunSingleBtnHeight - lMargin;
        h.RunOptSolBtn = uicontrol(f, 'Style', 'pushbutton',...
                                      'String' , 'Find Optimal Solutions',...
                                      'Units', 'pixels',...
                                      'Position', [lPresetX, lFindOptimalSolutionBtnY,...
                                      lPresetWidth, lRunSingleBtnHeight],...
                                      'Callback', @runOptSol_Callback,...
                                      'BackgroundColor',[179 204 255]/255);

        %% Surf plot Simulations
        % a comprehensive plot for seeing how your simulation space turned out

        lSimulationOverviewTitleY = lFindOptimalSolutionBtnY ...
                                 - lSimControlTitleHeight- 1.5*lMargin;

        uicontrol(f, 'Style','text','String','Simulations Overview:',...
                     'Units','pixels',...
                     'HorizontalAlignment','Left',...
                     'Fontsize',14,...
                     'Position',[lPresetX,lSimulationOverviewTitleY,...
                     lPresetWidth,lSimControlTitleHeight]);

        lSimulationOverviewBtnHeight = 45;
        lSimulatonOverviewBtnY = lSimulationOverviewTitleY ...
                                 - lSimulationOverviewBtnHeight - 1.5*lMargin;

        h.SimulationOverview = uicontrol(f, 'Style', 'pushbutton', ...
                                      'String' , 'Simulation Overview',...
                                      'Units', 'pixels',...
                                      'Position', [lPresetX, lSimulatonOverviewBtnY,...
                                      lPresetWidth, lSimulationOverviewBtnHeight],...
                                      'Callback', @simulationOverviw_Callback,...
                                      'BackgroundColor',[206 255 213]/255);




        %% Launch Solution Explorer ===============================================
        % when you have generated the data needed, you can explore the solutions
        % further by opening the solution_explorer with this control.

        lSolutionExplorerTitleY = lSimulatonOverviewBtnY ...
                                - lSimControlTitleHeight- 1.5*lMargin;

        uicontrol(f, 'Style','text','String','Solution Explorer:',...
                     'Units','pixels',...
                     'HorizontalAlignment','Left',...
                     'Fontsize',14,...
                     'Position',[lPresetX,lSolutionExplorerTitleY,...
                     lPresetWidth,lSimControlTitleHeight]);

        lRunSolutionExplorerBtnHeight = lSimulationOverviewBtnHeight;
        lRunSolutionExplorerBtnY = lSolutionExplorerTitleY ...
                                 - lRunSolutionExplorerBtnHeight - 1.5*lMargin;

        h.RunSolutionExplorer = uicontrol(f, 'Style', 'pushbutton', ...
                                      'String' , 'Run Solution Explorer',...
                                      'Units', 'pixels',...
                                      'Position', [lPresetX, lRunSolutionExplorerBtnY,...
                                      lPresetWidth, lRunSolutionExplorerBtnHeight],...
                                      'Callback', @runSolutionExplorer_Callback,...
                                      'BackgroundColor',[206 255 213]/255);

        %% Panels and parameter Input =============================================
        % this entire section is an initialization of the panels and their texts
        % and edit fields for inputing parameters.
        % Worth noting: 
        % - The metrics are dependant on eachother, if you wish to change the
        % layout, try to play with the different metrics to see if you can find
        % some metrics that cascade the way you wish. In most cases you will just
        % have to figure out what metrics build on previous metrics and change
        % these.

        %% SimPar Panel
        lNumberOfSimPar = 6;
        lSimParPanelHeight = lNextRow*(lNumberOfSimPar) + lMargin*2;
        lSimParPanelY = lTitleStartY - lMargin- lSimParPanelHeight;

        h.SimParamPanel = uipanel(f,'Title','Sim Parameters',...
                        'Units','pixels',...
                        'Position',[lMargin,lSimParPanelY,...
                        lPanelWidth,lSimParPanelHeight]);

        lTextY = lSimParPanelHeight-lPanelEdge;
        lTextX = lMargin;

        lEditWidth = 0.3*lPanelWidth;
        lEditHeight = 18;
        lEditX = lPanelWidth-lMargin-lEditWidth;
        lEditY = lTextY+lAlignEditText;

        % PV
        uicontrol(h.SimParamPanel,'Style','text','String','PV start [kW]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');

        h.PvStart = uicontrol(h.SimParamPanel,'Style','edit',...
                            'String',Set.pvStartKw,...
                            'Units','pixels',...
                            'Position',[lEditX,lEditY,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.SimParamPanel,'Style','text','String','PV stop [kW]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY - lNextRow,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');

        h.PvStop = uicontrol(h.SimParamPanel,'Style','edit',...
                            'String',Set.pvStopKw,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.SimParamPanel,'Style','text','String','PV step [kW]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY - lNextRow*2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');
        h.PvStep = uicontrol(h.SimParamPanel,'Style','edit',...
                            'String',Set.pvStepKw,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*2,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');  

        % Batt
        uicontrol(h.SimParamPanel,'Style','text','String','Batt start [kWh]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY - lNextRow*3,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');
        h.BattStart = uicontrol(h.SimParamPanel,'Style','edit',...
                            'String',Set.battStartKwh,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*3,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');  


        uicontrol(h.SimParamPanel,'Style','text','String','Batt stop [kWh]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY - lNextRow*4,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');
        h.BattStop = uicontrol(h.SimParamPanel,'Style','edit',...
                            'String',Set.battStopKwh,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*4,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.SimParamPanel,'Style','text','String','Batt step [kWh]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY - lNextRow*5,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');
        h.BattStep = uicontrol(h.SimParamPanel,'Style','edit',...
                            'String',Set.battStepKwh,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*5,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');



        %% InData Panel
        lInDataPanelHeight = lNextRow*2-10;
        lDataNextRow = 0.65*lNextRow;
        lInDataPanelWidth = lFigWidth-lMargin*2;
        lInDataPanelY = lMargin;
        h.InDataPanel = uipanel(f,'Title','Input Data Files',...
                          'Units','pixels',...
                          'Position',[lMargin,lInDataPanelY,...
                           lInDataPanelWidth , lInDataPanelHeight]);   

        lInDataTextWidth = 0.2*lInDataPanelWidth;           
        lDataEditX = lMargin + lInDataTextWidth;
        lInDataEditWidth = 0.26*lInDataPanelWidth;

        %loadProfileData text and edit
        lLoadProfileDataTextY = lInDataPanelHeight - lPanelEdge+5;
        lLoadProfileDataEditY = lLoadProfileDataTextY + lAlignEditText;
        uicontrol(h.InDataPanel,'Style', 'text',...
                                'String', 'Load Data Filename',...
                                'Units', 'pixels', ...
                                'Position', [lMargin, lLoadProfileDataTextY,...
                                             lInDataTextWidth, lTextSingleHeight],...
                                'HorizontalAlignment','Left');
        h.loadProfileData = uicontrol(h.InDataPanel,'Style','edit','String',...
                            Set.loadProfileData,...
                            'Units','pixels',...
                            'Position',[lDataEditX, lLoadProfileDataEditY,...
                                        lInDataEditWidth,lEditHeight],...
                            'HorizontalAlignment','Left');

        %irradiationDataText and edit
        lIrradiationDataTextY = lLoadProfileDataTextY - lDataNextRow;
        lIrradiationDataEditY = lLoadProfileDataEditY - lDataNextRow;
        uicontrol(h.InDataPanel,'Style', 'text', ...
                                'String', 'Irradiation Data Filename',...
                                'Units', 'pixels', ...
                                'Position',...
                                [lMargin, lIrradiationDataTextY + lMultiLineAdjust2,...
                                lInDataTextWidth, lTextSingleHeight],...
                                'HorizontalAlignment', 'Left')
        h.irradiationData = uicontrol(h.InDataPanel,'Style','edit','String',...
                            Set.irradiationData,...
                            'Units','pixels',...
                            'Position',[lDataEditX, lIrradiationDataEditY,...
                                        lInDataEditWidth,lEditHeight],...
                            'HorizontalAlignment','Left');

        %Temperature text and edit
        lInDataNextColumnX = 0.5*lInDataPanelWidth;
        lDataEditX = lInDataNextColumnX + lMargin + lInDataTextWidth;
        uicontrol(h.InDataPanel,'Style', 'text',...
                                'String', 'Temperature Data Filename',...
                                'Units', 'pixels', ...
                                'Position',...
                                [lInDataNextColumnX, lLoadProfileDataTextY + lMultiLineAdjust2,...
                                lInDataTextWidth, lTextSingleHeight],...
                                'HorizontalAlignment','Left');
                            
        h.temperatureData = uicontrol(h.InDataPanel,'Style','edit',...
                            'String', Set.temperatureData,...
                            'Units','pixels',...
                            'Position',[lDataEditX,lLoadProfileDataEditY,...
                                        lInDataEditWidth,lEditHeight],...
                            'HorizontalAlignment','Left');

        %dataSetFolderName text and edit
        uicontrol(h.InDataPanel,'Style', 'text', 'String', 'Data Set',...
                                'Units', 'pixels', ...
                                'Position', ...
                                [lInDataNextColumnX, lIrradiationDataTextY,...
                                lInDataTextWidth, lTextSingleHeight],...
                                'HorizontalAlignment', 'Left')
                            
        h.dataSetFolderName = uicontrol(h.InDataPanel,'Style','edit',...
                            'String', Set.dataSetFolderName,...
                            'Units','pixels',...
                            'Position',[lDataEditX, lIrradiationDataEditY,...
                                        lInDataEditWidth,lEditHeight],...
                            'HorizontalAlignment','Left');



        %% Battery Parameter Panel
        nBattParam = 6;
        lBattParPanelHeight = nBattParam*lNextRow + lMargin*2;
        lBattPanelStartY = lSimParPanelY - lBattParPanelHeight;


        h.BattParamPanel = uipanel(f,'Title','Battery Parameters',...
                          'Units','pixels',...
                          'Position',[lMargin,lBattPanelStartY,...
                          lPanelWidth, lBattParPanelHeight]);   

        lTextY = lBattParPanelHeight-lPanelEdge;
        lEditY = lTextY + lAlignEditText;


        uicontrol(h.BattParamPanel,'Style','text',...
                            'String','Min State Of Charge [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.MinStateOfCharge = uicontrol(h.BattParamPanel,'Style','edit',...
                            'String', Set.minStateOfCharge,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.BattParamPanel,'Style','text',...
                            'String','Initial State Of Charge [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY- lNextRow + lMultiLineAdjust2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.InitialStateOfCharge = uicontrol(h.BattParamPanel,'Style','edit',...
                            'String', Set.initialStateOfCharge,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.BattParamPanel,'Style','text',...
                            'String','Charging Efficiency [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY- lNextRow*2 + lMultiLineAdjust2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.ChargingEfficiency = uicontrol(h.BattParamPanel,'Style','edit',...
                            'String', Set.chargingEfficiency,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*2,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.BattParamPanel,'Style','text',...
                            'String','Discharging Efficiency [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY- lNextRow*3 + lMultiLineAdjust2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.DischargingEfficiency = uicontrol(h.BattParamPanel,'Style','edit','String',...
                            Set.dischargingEfficiency,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*3,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.BattParamPanel,'Style','text','String','Power-Energy Ratio',...
                            'Units','pixels',...
                            'Position',...
                            [lTextX,lTextY- lNextRow*4 + lMultiLineAdjust2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.PowerEnergyRatio = uicontrol(h.BattParamPanel,'Style','edit',...
                            'String', Set.powerEnergyRatio,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*4,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.BattParamPanel,'Style','text',...
                            'String','Max Operational Years',...
                            'Units','pixels',...
                            'Position',...
                            [lTextX,lTextY- lNextRow*5 + lMultiLineAdjust2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.MaxOperationalYears = uicontrol(h.BattParamPanel,'Style','edit',...
                            'String', Set.maxOperationalYears,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*5,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');



        %% Economic Parameters Panel
        %lNumberOfEcoPar = 11;
        %lEcoParPanelHeight = lNextRow*(lNumberOfEcoPar)+lPanelEdge +lMargin;
        %lEcoParPanelY = lTitleStartY - lMargin- lEcoParPanelHeight;
        lEcoParPanelY = lBattPanelStartY;
        lEcoParPanelHeight = lTitleStartY - lMargin -lEcoParPanelY;
        h.EcoParamPanel = uipanel(f,'Title','Economic Parameters',...
                          'Units','pixels',...
                          'Position',[lMargin + lPanelWidth,...
                          lEcoParPanelY,lPanelWidth, lEcoParPanelHeight]);

        lTextY = lEcoParPanelHeight-lPanelEdge;
        lEditY = lTextY + lAlignEditText;

        uicontrol(h.EcoParamPanel,'Style','text','String','Budget',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.Budget= uicontrol(h.EcoParamPanel,'Style','edit','String',Set.budget,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');


        uicontrol(h.EcoParamPanel,'Style','text','String','PV cost [/kW]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY-lNextRow,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.PvCost= uicontrol(h.EcoParamPanel,'Style','edit',...
                            'String',Set.pvCostKw,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY-lNextRow,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');


        uicontrol(h.EcoParamPanel,'Style','text','String','Batt cost [/kWh]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY-lNextRow*2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.BattCost= uicontrol(h.EcoParamPanel,'Style','edit',...
                            'String',Set.battCostKwh,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY-lNextRow*2,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');


        uicontrol(h.EcoParamPanel,'Style','text','String','Batt cost fixed',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY-lNextRow*3,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.BattCostFix= uicontrol(h.EcoParamPanel,'Style','edit',...
                            'String',Set.battCostFixed,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY-lNextRow*3,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');


        uicontrol(h.EcoParamPanel,'Style','text','String','Inverter Cost [\kW]',...
                            'Units','pixels',...
                            'Position',...
                            [lTextX,lTextY-lNextRow*4 + lMultiLineAdjust2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.InverterCost= uicontrol(h.EcoParamPanel,'Style','edit',...
                            'String',Set.inverterCostKw,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY-lNextRow*4,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');


        uicontrol(h.EcoParamPanel,'Style','text',...
                            'String','Operation and Maintenance cost [/kW]',...
                            'Units','pixels',...
                            'Position',...
                            [lTextX,lTextY-lNextRow*5 + lMultiLineAdjust3,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.OperationMaintenanceCost= uicontrol(h.EcoParamPanel,'Style','edit',...
                            'String',Set.operationMaintenanceCostKw,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY-lNextRow*5,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');


        uicontrol(h.EcoParamPanel,'Style','text',...
                            'String','Installation and Balance of System [%]',...
                            'Units','pixels',...
                            'Position',...
                            [lTextX,lTextY-lNextRow*6 + lMultiLineAdjust3 ,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.InstallBalanceOfSystemCost= uicontrol(h.EcoParamPanel,'Style','edit',...
                            'String',Set.installBalanceOfSystemCost,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY-lNextRow*6,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');


        uicontrol(h.EcoParamPanel,'Style','text',...
                            'String','Plant Lifetime [years]',...
                            'Units','pixels',...
                            'Position',...
                            [lTextX,lTextY-lNextRow*7 + lMultiLineAdjust2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.PlantLifetime = uicontrol(h.EcoParamPanel,'Style','edit',...
                            'String',Set.plantLifetimeYears,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY-lNextRow*7,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.EcoParamPanel,'Style','text','String','Interest rate [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY-lNextRow*8,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.InterestRate = uicontrol(h.EcoParamPanel,'Style','edit',...
                            'String',Set.interestRate,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY-lNextRow*8,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.EcoParamPanel,'Style','text',...
                            'String','Biomass Cost [/kW]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY-lNextRow*9 + lMultiLineAdjust2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.BiomassCost = uicontrol(h.EcoParamPanel,'Style','edit',...
                            'String',Set.biomassCostKw,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY-lNextRow*9,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');           

        uicontrol(h.EcoParamPanel,'Style','text',...
                            'String','Biomass System Investment Cost',...
                            'Units','pixels',...
                            'Position',...
                            [lTextX,lTextY-lNextRow*10 + lMultiLineAdjust3,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.BiomassSystemInvestmentCost = uicontrol(h.EcoParamPanel,...
                            'Style','edit',...
                            'String',Set.biomassSystemInvestmentCost,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY-lNextRow*10,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.EcoParamPanel,'Style','text',...
                            'String','Biomass System Operation Cost',...
                            'Units','pixels',...
                            'Position',...
                            [lTextX,lTextY-lNextRow*11 + lMultiLineAdjust3,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.biomassSystemOperationCost = uicontrol(h.EcoParamPanel,...
                            'Style','edit',...
                            'String',Set.biomassSystemOperationCost,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY-lNextRow*11,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        %% help btn

        lHelpBtnY = lInDataPanelY + lInDataPanelHeight;
        lHelpBtnHeight = 100;
        lHelpBtnWidth = lPanelWidth;
        h.HelpBtn = uicontrol(f,'Style','pushbutton','String','Help',...
                                'FontSize',20,...
                                'Callback', @helpBtn_Callback,...
                                'Position',...
                                [lMargin, lHelpBtnY,...
                                lHelpBtnWidth, lHelpBtnHeight]);


        %% Inverter Parameter Panel
        lInvPanelStartY = lHelpBtnY + lHelpBtnHeight;
        lInvParPanelHeight = lBattPanelStartY - lInvPanelStartY;
        h.InvParamPanel = uipanel(f,'Title','Inverter Parameters',...
                          'Units','pixels',...
                          'Position',[lMargin,lInvPanelStartY,...
                          lPanelWidth, lInvParPanelHeight]);   

        lTextY = lInvParPanelHeight-lPanelEdge;
        lEditY = lTextY + lAlignEditText;

        uicontrol(h.InvParamPanel,'Style','text','String','Efficiency [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.InvEfficiency = uicontrol(h.InvParamPanel,'Style','edit','String',...
                            Set.invEfficiency,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');    






        %% Biomas Panel
        nBiomasParam = 7;
        lBiomasPanelX = lMargin + lPanelWidth*2;
        lBiomasPanelHeight =  nBiomasParam * lNextRow + lMargin*2; %lRunSolutionExplorerBtnY - lBiomasPanelY - lMargin;
        lBiomasPanelY = lTitleStartY - lMargin- lBiomasPanelHeight;
        lTextY = lBiomasPanelHeight - lNextRow - lMargin;
        lEditY = lTextY + lAlignEditText;


        h.BiomasParamPanel = uipanel(f,'Title','Biomas Parameters', ...
                             'Units','Pixels',...
                             'Position',...
                             [lBiomasPanelX, lBiomasPanelY, ...
                             lPanelWidth, lBiomasPanelHeight]);

        h.IsPreemptive = uicontrol(h.BiomasParamPanel,'Style','checkbox',...
                             'Value',str2double(Set.isPreemptive),...
                             'Position',...
                             [lTextX, lTextY + lMargin,...
                             0.9*lPanelWidth, lEditHeight],...
                             'HorizontalAlignment', 'Center',...
                             'String','is Preemptive');

        h.PowerTresholdText = uicontrol(h.BiomasParamPanel,...
                             'Style','text',...
                             'String', 'Peak PV Power-Treshold', ...
                             'Position',[lTextX, lTextY - lNextRow + lMultiLineAdjust2,...
                             lTextWidth, lTextSingleHeight],...
                             'HorizontalAlignment','Left');
        h.PowerTreshold = uicontrol(h.BiomasParamPanel,...
                             'Style','edit',...
                             'String', Set.powerTreshold,...
                             'Position',[lEditX, lEditY - lNextRow,...
                             lEditWidth, lEditHeight]);

        h.BiomassDeliveredText = uicontrol(h.BiomasParamPanel,...
                             'Style','text',...
                             'String', 'Biomass Delivered [kW]', ...
                             'Position',...
                             [lTextX, lTextY - 2*lNextRow + lMultiLineAdjust2,...
                             lTextWidth, lTextSingleHeight],...
                             'HorizontalAlignment','Left');
        h.BiomassDelivered = uicontrol(h.BiomasParamPanel,...
                             'Style','edit',...
                             'String', Set.biomassDeliveredKw,...
                             'Position',...
                             [lEditX, lEditY - 2*lNextRow ,...
                              lEditWidth, lEditHeight]);

        h.BiomassDeliveryIntervalText = uicontrol(h.BiomasParamPanel,...
                             'Style','text',...
                             'String', 'Intervall of Biomass Delivery [Days]', ...
                             'Position',...
                             [lTextX, lTextY - 3*lNextRow + lMultiLineAdjust3,...
                             lTextWidth, lTextSingleHeight],...
                             'HorizontalAlignment','Left');
        h.BiomassDeliveryInterval = uicontrol(h.BiomasParamPanel,...
                             'Style','edit',...
                             'String', Set.biomassDeliveryIntervalDays,...
                             'Position',...
                             [lEditX, lEditY - 3*lNextRow,...
                              lEditWidth, lEditHeight]);

        h.GeneratorOutputText = uicontrol(h.BiomasParamPanel,...
                             'Style','text',...
                             'String', 'Generator Output Kw', ...
                             'Position',...
                             [lTextX, lTextY - 4*lNextRow + lMultiLineAdjust2,...
                             lTextWidth, lTextSingleHeight],...
                             'HorizontalAlignment','Left');
        h.GeneratorOutput = uicontrol(h.BiomasParamPanel,...
                             'Style','edit',...
                             'String', Set.generatorOutputKw,...
                             'Position',[lEditX, lEditY - 4*lNextRow,...
                              lEditWidth, lEditHeight]);

        h.StartupDelayText = uicontrol(h.BiomasParamPanel,...
                             'Style','text','String',...
                             'Startup Delay at Lost Load [hours]', ...
                             'Position',[lTextX, lTextY - 5*lNextRow + lMultiLineAdjust3,...
                             lTextWidth, lTextSingleHeight],...
                             'HorizontalAlignment','Left');
        h.StartupDelay = uicontrol(h.BiomasParamPanel,...
                             'Style','edit','String', Set.startupDelayHours,...
                             'Position',[lEditX, lEditY - 5*lNextRow,...
                             lEditWidth, lEditHeight]);

        h.RetryDelayText = uicontrol(h.BiomasParamPanel,...
                             'Style','text',...
                             'String', 'Retry Delay when biomas generation fails', ...
                             'Position',...
                             [lTextX, lTextY - 6*lNextRow + lMultiLineAdjust3,...
                             lTextWidth, lTextSingleHeight],...
                             'HorizontalAlignment','Left');
        h.RetryDelay = uicontrol(h.BiomasParamPanel,...
                             'Style','edit',...
                             'String', Set.retryDelayHours,...
                             'Position',[lEditX, lEditY - 6*lNextRow, lEditWidth, lEditHeight]);


        %% PV Parameters Panel
        nPvPar = 5;
        lPvParPanelHeight = lNextRow*nPvPar +lMargin*2;
        lPvPanelY = lBiomasPanelY - lPvParPanelHeight;
        h.PvParamPanel = uipanel(f,'Title','PV Parameters',...
                          'Units','pixels',...
                          'Position',[lMargin + 2*lPanelWidth,...
                          lPvPanelY,lPanelWidth, lPvParPanelHeight]);

        lTextY = lPvParPanelHeight-lPanelEdge;
        lEditY = lTextY + lAlignEditText;

        uicontrol(h.PvParamPanel,'Style','text',...
                             'String','Balance Of System [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.BalanceOfSystem = uicontrol(h.PvParamPanel,...
                             'Style','edit',...
                             'String', Set.balanceOfSystem,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.PvParamPanel,'Style','text',...
                            'String','Nominal Ambient Temperature [C]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY- lNextRow+ lMultiLineAdjust3,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.NominalAmbientTemp = uicontrol(h.PvParamPanel,...
                            'Style','edit',...
                            'String', Set.nominalAmbientTemperatureC,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.PvParamPanel,...
                            'Style','text',...
                            'String','Nominal Cell Temperature [C]',...
                            'Units','pixels',...
                            'Position',...
                            [lTextX,lTextY- lNextRow*2 + lMultiLineAdjust2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.NominalCellTemp = uicontrol(h.PvParamPanel,...
                            'Style','edit',...
                            'String', Set.nominalCellTemperatureC,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*2,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.PvParamPanel,'Style','text',...
                            'String','Nominal Irradiation [kW/m^2]',...
                            'Units','pixels',...
                            'Position',...
                            [lTextX,lTextY- lNextRow*3 + lMultiLineAdjust3,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.NominalIrradiation = uicontrol(h.PvParamPanel,'Style','edit','String',...
                            Set.nominalIrradiation,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*3,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');


        uicontrol(h.PvParamPanel,'Style','text',...
                            'String','Power Derate Due Temp [/C]',...
                            'Units','pixels',...
                            'Position',...
                            [lTextX,lTextY- lNextRow*4 + lMultiLineAdjust2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');               
        h.PowerDerateDueTemp = uicontrol(h.PvParamPanel,...
                            'Style','edit',...
                            'String', Set.powerDerateDueTemperature,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*4,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        %% NPC Optimum Search Constraints

        lLlpConstraintPanelY = lInDataPanelY + lInDataPanelHeight;
        lNpcConstraintPanelHeight = lBattPanelStartY - lLlpConstraintPanelY ;
        h.NpcConstraintPanel = uipanel(f,'Title','NPC Optimum Search Constraints',...
                                      'Units','pixels',...
                                      'Position',[lMargin + lPanelWidth,...
                                      lLlpConstraintPanelY,lPanelWidth,...
                                      lNpcConstraintPanelHeight]);

        lTextY = lNpcConstraintPanelHeight - lPanelEdge -0.5*lMargin;
        lEditY = lTextY + lAlignEditText;


        uicontrol(h.NpcConstraintPanel,...
                            'Style','text',...
                            'String','NPC Search Acceptance [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');
        h.NpcAccept = uicontrol(h.NpcConstraintPanel,...
                            'Style','edit',...
                            'String',Set.npcAccept,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.NpcConstraintPanel,...
                            'Style','text',...
                            'String','NPC start',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY - lNextRow,...
                             lTextWidth,lTextSingleHeight],...
                             'HorizontalAlignment', 'Left');
                         
        h.NpcStart = uicontrol(h.NpcConstraintPanel,...
                            'Style','edit',...
                            'String',Set.npcStart,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.NpcConstraintPanel,...
                            'Style','text',...
                            'String','NPC stop',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY - lNextRow*2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');
                        
        h.NpcStop = uicontrol(h.NpcConstraintPanel,'Style','edit','String',Set.npcStop,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*2,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.NpcConstraintPanel,'Style','text','String','NPC step',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY - lNextRow*3,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');
                        
        h.NpcStep = uicontrol(h.NpcConstraintPanel,...
                            'Style','edit','String',Set.npcStep,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*3,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');



        %% LLP Optimum constraints panel
        lLlpConstraintPanelY = lInDataPanelY + lInDataPanelHeight;
        lLlpConstraintPanelHeight = lPvPanelY - lLlpConstraintPanelY ;

        h.LlpConstraintPanel = uipanel(f,'Title','Llp Optimum Search Constraints',...
                                      'Units','pixels',...
                                      'Position',...
                                      [lMargin + 2*lPanelWidth,...
                                      lLlpConstraintPanelY,lPanelWidth,...
                                      lLlpConstraintPanelHeight]);

        lTextY = lLlpConstraintPanelHeight - lPanelEdge - 0.5*lMargin;
        lEditY = lTextY + lAlignEditText;



        uicontrol(h.LlpConstraintPanel,...
                            'Style','text',...
                            'String','LLP Search Acceptance [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY + lMultiLineAdjust2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');
        h.LlpAccept = uicontrol(h.LlpConstraintPanel,...
                            'Style','edit',...
                            'String',Set.llpAccept,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.LlpConstraintPanel,...
                            'Style','text',...
                            'String','LLP start [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY - lNextRow,...
                             lTextWidth,lTextSingleHeight],...
                             'HorizontalAlignment', 'Left');
        h.LlpStart = uicontrol(h.LlpConstraintPanel,...
                            'Style','edit',...
                            'String',Set.llpStart,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.LlpConstraintPanel,...
                            'Style','text',...
                            'String','LLP stop [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY - lNextRow*2,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');
                        
        h.LlpStop = uicontrol(h.LlpConstraintPanel,...
                            'Style','edit',...
                            'String',Set.llpStop,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*2,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');

        uicontrol(h.LlpConstraintPanel,...
                            'Style','text',...
                            'String','LLP step [%]',...
                            'Units','pixels',...
                            'Position',[lTextX,lTextY - lNextRow*3,...
                             lTextWidth,lTextSingleHeight],...
                            'HorizontalAlignment', 'Left');
        h.LlpStep = uicontrol(h.LlpConstraintPanel,'Style','edit','String',Set.llpStep,...
                            'Units','pixels',...
                            'Position',[lEditX, lEditY - lNextRow*3,...
                             lEditWidth,lEditHeight],...
                            'HorizontalAlignment','Center');



        %% Iteration tracker and Help Button:
        lIterationTrackerWidth = 0.25*lFigWidth;
        lIterationTrackerX = lFigWidth - lIterationTrackerWidth - lMargin;
        h.IterationTracker = uicontrol(f,'Style','text',...
                                       'Units','pixels',...
                                       'HorizontalAlignment','Left',...
                                       'FontSize',9,...
                                       'Position', [lIterationTrackerX, lTitleStartY,...
                                        lIterationTrackerWidth, lPresetTitleHeight],...
                                        'FontWeight', 'bold');

        lUpdateIterationTrackerWidth = 50;
        h.UpdateIterationTrackerBtn = uicontrol(f,'Style','pushbutton','String','Update',...
                                'Callback', @updateIterationTrackerBtn_Callback,...
                                'Position', [lIterationTrackerX - ...
                                lUpdateIterationTrackerWidth - lMargin,...
                                lTitleStartY, lUpdateIterationTrackerWidth, 25]);




        set_iteration_tracker_string
    end
end

% returns the path of the preset folder (where presets are stored)
function presetsPath = get_presets_path
       filename = mfilename();
       localPath = mfilename('fullpath');
       localPath = localPath(1:end-length(filename));
       operating_system = getenv('OS');
       if strcmp(operating_system(1:7), 'Windows')
           presetsPath = strcat(localPath, 'presets\');         
       else
           presetsPath = strcat(localPath, 'presets/');
       end
end

% Convert the strings from the 'Set' struct to
function [SimParam, EcoParam, PvParam, BattParam, InvParam, SimData, BiomParam]...
         = get_classes(Set)

    llpRange = str2double(Set.llpStart)/100 ...
              : str2double(Set.llpStep)/100 ...
              : str2double(Set.llpStop)/100;
    npcRange = str2double(Set.npcStart)...
              : str2double(Set.npcStep)...
              : str2double(Set.npcStop);
    
    SimParam = SimulationParameters(str2double(Set.pvStartKw),...
                                    str2double(Set.pvStopKw),...
                                    str2double(Set.pvStepKw),...
                                    str2double(Set.battStartKwh),...
                                    str2double(Set.battStopKwh),...
                                    str2double(Set.battStepKwh),...
                                    str2double(Set.checkBoxBiomass),...
                                    str2double(Set.llpAccept)/100,...
                                    llpRange,...
                                    str2double(Set.npcAccept),...
                                    npcRange);
                                
    EcoParam = EconomicParameters;
    EcoParam.budget = str2double(Set.budget);
    EcoParam.pvCostKw = str2double(Set.pvCostKw);        
    EcoParam.battCostKwh = str2double(Set.battCostKwh);             
    EcoParam.battCostFixed = str2double(Set.battCostFixed);             
    EcoParam.inverterCostKw = str2double(Set.inverterCostKw);         
    EcoParam.operationMaintenanceCostKw = str2double(Set.operationMaintenanceCostKw);
    EcoParam.installBalanceOfSystemCost = str2double(Set.installBalanceOfSystemCost)/100;
    EcoParam.plantLifetimeYears = str2double(Set.plantLifetimeYears);
    EcoParam.interestRate = str2double(Set.interestRate)/100;
    EcoParam.bioSystemInvestmentCost = str2double(Set.biomassSystemInvestmentCost);
    EcoParam.bioSystemOperationCost = str2double(Set.biomassSystemOperationCost);
    EcoParam.biomassCostKw = str2double(Set.biomassCostKw);

    PvParam.balanceOfSystem = str2double(Set.balanceOfSystem)/100;            
    PvParam.nominalAmbientTemperatureC = str2double(Set.nominalAmbientTemperatureC);              
    PvParam.nominalCellTemperatureC = str2double(Set.nominalCellTemperatureC);              
    PvParam.nominalIrradiation = str2double(Set.nominalIrradiation);             
    PvParam.powerDerateDueTemperature = str2double(Set.powerDerateDueTemperature); 
    
    BattParam = BatteryParameters;
    BattParam.minStateOfCharge = str2double(Set.minStateOfCharge)/100;            
    BattParam.initialStateOfCharge = str2double(Set.initialStateOfCharge)/100;            
    BattParam.chargingEfficiency = str2double(Set.chargingEfficiency)/100;             
    BattParam.dischargingEfficiency = str2double(Set.dischargingEfficiency)/100;             
    BattParam.powerEnergyRatio = str2double(Set.powerEnergyRatio);              
    BattParam.maxOperationalYears = str2double(Set.maxOperationalYears);   
    
    InvParam.efficiency = str2double(Set.invEfficiency)/100;
    
    SimData = SimulationInputData( Set.loadProfileData,...
                                   Set.irradiationData,...
                                   Set.temperatureData,...
                                   Set.dataSetFolderName);

    BiomParam = BiomassParameters( str2double(Set.isPreemptive) ,...
                                   str2double(Set.powerTreshold) ,...
                                   str2double(Set.biomassDeliveredKw),...
                                   str2double(Set.biomassDeliveryIntervalDays),...
                                   str2double(Set.generatorOutputKw),...
                                   str2double(Set.startupDelayHours),...
                                   str2double(Set.retryDelayHours));
end


function parameters_to_workspace(SimParam,EcoParam,PvParam,BattParam,...
                                 InvParam,SimData, BiomParam)
    assignin('base','SimParam', SimParam)
    assignin('base','EcoParam', EcoParam)
    assignin('base','PvParam', PvParam)
    assignin('base','BattParam', BattParam)
    assignin('base','InvParam', InvParam)
    assignin('base','SimData', SimData)
    assignin('base','BiomParam', BiomParam)
end


