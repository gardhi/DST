function solution_explorer

%% Figure Contruction and Initialization ==================================
% Figure
lFigWidth = 500; lFigHeight = 900;
f = figure('Visible','off','Units','pixels',...
           'Position',[340,80,lFigWidth,lFigHeight],'menubar','none');

% Global Metrics
lMargin = 10;

% Global Variables
global h OptSol EcoOut SimOut...
       SimParam PvParam BattParam InvParam EcoParam SimData
global solutionList analysisOut

get_parameters


% Title -------------------------------------------------------------------
lTitleHeight = 30; lTitleWidth = 300;
lTitleStartY = lFigHeight - lMargin - lTitleHeight;
h.Title = uicontrol(f,'Style','text','String','Solution Explorer',...
                   'Units','pixels','HorizontalAlignment','Left',...
                   'FontSize',16,...
                   'Position', [lMargin, lTitleStartY,...
                    lTitleWidth, lTitleHeight]);

% Solution Listbox Header -------------------------------------------------
lSolutionListHeaderHeight = 20; 
lSoltuionListHeaderWidth = lTitleWidth;
lSolutionListHeaderY = lTitleStartY - lMargin - lSolutionListHeaderHeight;
h.SolutionListHeader = uicontrol(f,'Style','text','String','Pick a Solution to Examine...',...
                       'Units','pixels','HorizontalAlignment','Left',...
                       'FontSize',10,...
                       'Position', [lMargin, lSolutionListHeaderY,...
                        lSoltuionListHeaderWidth, lSolutionListHeaderHeight]);

% Solution ListBox 
% displays the available solutions
lSolutionListHeight = 0.1*lFigHeight;
lSolutionListWidth = lFigWidth- lMargin*2;
lSolutionListY = lSolutionListHeaderY - lSolutionListHeight;
h.SolutionList = uicontrol(f, 'Style','listbox',...
                           'Position', [lMargin, lSolutionListY,...
                                        lSolutionListWidth, lSolutionListHeight]);


% Solution Info Header ----------------------------------------------------
lSolutionInfoHeaderHeight = 20;
lSolutionInfoHeaderY = lSolutionListY - lSolutionListHeaderHeight - 3;
h.SolutionInfoHeader = uicontrol(f,'Style','text','String','Data Analysis Output:',...
                       'Units','pixels','HorizontalAlignment','Left',...
                       'FontSize',10,...
                       'Position', [lMargin, lSolutionInfoHeaderY,...
                        lSoltuionListHeaderWidth, lSolutionInfoHeaderHeight]);


% displays information about the chosen solutions
lSolutionInfoHeight = 0.2*lFigHeight;
lSolutionInfoWidth = lSolutionListWidth*0.5;
lSolutionInfoX1 = lMargin;
lSolutionInfoY = lSolutionInfoHeaderY - lSolutionInfoHeight -1;
h.SolutionInfoLeft = axes('Parent', f, 'Units','pixels',...
                      'XLim',[0 1],'Ylim',[0 1],'Box','on',...
                      'XTick',[],'YTick',[],...
                      'Position',[lSolutionInfoX1, lSolutionInfoY,...
                                  lSolutionInfoWidth,lSolutionInfoHeight]);
% Solution Info Window 2
% displays information about the chosen solutions
lSolutionInfoHeight = 0.2*lFigHeight;
lSolutionInfoX2 = lMargin + lSolutionInfoWidth;
lSolutionInfoY = lSolutionInfoHeaderY - lSolutionInfoHeight -1;
h.SolutionInfoRight = axes('Parent', f, 'Units','pixels',...
                      'XLim',[0 1],'Ylim',[0 1],'Box','on',...
                      'XTick',[],'YTick',[],...
                      'Position',[lSolutionInfoX2, lSolutionInfoY,...
                                  lSolutionInfoWidth,lSolutionInfoHeight]);
                              
% Window Choice Panel -----------------------------------------------------
lRadioBtnHeight = 15;
lRadioBtnWidth = 150;
lWindowChoiceBtnGroupHeight = lRadioBtnHeight*3;
lWindowChoiceBtnGroupY = lSolutionInfoY - lWindowChoiceBtnGroupHeight-lMargin;
h.WindowChoiceBtnGroup = uibuttongroup(f,'Title','Choose Output Window',...
                                'Units','pixels',...
                                'Position',[lMargin,lWindowChoiceBtnGroupY ,...
                                lSolutionListWidth,lWindowChoiceBtnGroupHeight]);

lRadioBtnY = lWindowChoiceBtnGroupHeight - lRadioBtnHeight- lMargin*2;
lRadioBtnLeftX = lMargin;
h.WindowChoiceLeft = uicontrol(h.WindowChoiceBtnGroup, 'Style','radiobutton',...
                               'Units','pixels',...
                               'Position',[lRadioBtnLeftX,lRadioBtnY,...
                               lRadioBtnWidth,lRadioBtnHeight],...
                               'String', 'Output Left');
lRadioBtnCenterX = lRadioBtnLeftX + lRadioBtnWidth + 10;
h.WindowChoiceCenter = uicontrol(h.WindowChoiceBtnGroup, 'Style','radiobutton',...
                               'Units','pixels',...
                               'Position',[lRadioBtnCenterX,lRadioBtnY,...
                               lRadioBtnWidth,lRadioBtnHeight],...
                               'String', 'Output in New Window');
lRadioBtnRightX = lSolutionListWidth - lRadioBtnWidth + 50;
h.WindowChoiceRight = uicontrol(h.WindowChoiceBtnGroup, 'Style','radiobutton',...
                               'Units','pixels',...
                               'HorizontalAlignment','Right',...
                               'Position',[lRadioBtnRightX,lRadioBtnY,...
                               lRadioBtnWidth,lRadioBtnHeight],...
                               'String', 'Output Right');
                                                               
% Output Btns -------------------------------------------------------------
lOutputChoiceY = lWindowChoiceBtnGroupY - lSolutionListHeaderHeight - lMargin;
h.OutputChoiceHeader= uicontrol(f,'Style','text','String',['Output Choices '...
                        '(can be displayed above)'],...
                       'Units','pixels','HorizontalAlignment','Left',...
                       'FontSize',10,...
                       'Position', [lMargin, lOutputChoiceY,...
                        lSoltuionListHeaderWidth, lSolutionListHeaderHeight]);

lBtnHeight = 30;
lOutputBtnWidth = (lFigWidth-lMargin*4)/3;
lOuputBtnY = lOutputChoiceY - lMargin - lBtnHeight;
lAveragesBtnX = lMargin;
h.OutputAverages = uicontrol(f,'Style','pushbutton','String','Averages',...
                               'Units','pixels','HorizontalAlignment','Left',...
                               'Position', [lAveragesBtnX, lOuputBtnY,...
                                lOutputBtnWidth, lBtnHeight]);
lWorstCaseBtnX = lAveragesBtnX + lMargin + lOutputBtnWidth;
h.OutputWorstCase = uicontrol(f,'Style','pushbutton','String','Worst-Case',...
                                'Units','pixels','HorizontalAlignment','Left',...
                                'Position', [lWorstCaseBtnX, lOuputBtnY,...
                                lOutputBtnWidth, lBtnHeight]);
lBiomassConsumptionBtnX = lWorstCaseBtnX + lMargin + lOutputBtnWidth;
h.OutputWorstCase = uicontrol(f,'Style','pushbutton','String','Biomass Consumption',...
                                'Units','pixels','HorizontalAlignment','Left',...
                                'Position', [lBiomassConsumptionBtnX, lOuputBtnY,...
                                lOutputBtnWidth, lBtnHeight]);

% Plotting Btns -----------------------------------------------------------
lPlottingChoiceY = lOuputBtnY - lSolutionListHeaderHeight - lMargin;
h.PlottingChoiceHeader= uicontrol(f,'Style','text','String',['Plotting Choices ' ...
                                   '(always new figure)'],...
                                   'Units','pixels','HorizontalAlignment','Left',...
                                   'FontSize',10,...
                                   'Position', [lMargin, lPlottingChoiceY,...
                                    lSoltuionListHeaderWidth, lSolutionListHeaderHeight]);

lPlottingBtnWidth = (lFigWidth-lMargin*4)/3;
lPlottingBtnY = lPlottingChoiceY - lMargin - lBtnHeight;
lAveragesBtnX = lMargin;
h.PlotStateOfCharge = uicontrol(f,'Style','pushbutton','String','State Of Charge',...
                               'Units','pixels','HorizontalAlignment','Left',...
                               'Position', [lAveragesBtnX, lPlottingBtnY,...
                                lPlottingBtnWidth, lBtnHeight]);
lWorstCaseBtnX = lAveragesBtnX + lMargin + lPlottingBtnWidth;
h.PlotPowerBalance = uicontrol(f,'Style','pushbutton','String','Power Balance',...
                                'Units','pixels','HorizontalAlignment','Left',...
                                'Position', [lWorstCaseBtnX, lPlottingBtnY,...
                                lPlottingBtnWidth, lBtnHeight],...
                                'Callback', @plotPowerBalance_Callback);
lBiomassConsumptionBtnX = lWorstCaseBtnX + lMargin + lPlottingBtnWidth;
h.PlotAvgPowerBalance = uicontrol(f,'Style','pushbutton','String','Average Day Power Balance',...
                                'Units','pixels','HorizontalAlignment','Left',...
                                'Position', [lBiomassConsumptionBtnX, lPlottingBtnY,...
                                lPlottingBtnWidth, lBtnHeight],...
                                'Callback', @plotAvgPowerBalance_Callback);
                           
populate_solution_list
normalize_figure

f.Visible = 'on';

%% Callbacks ==============================================================

    function plotPowerBalance_Callback(src, eventdata)
        i = h.SolutionList.Value;
        plot_power_balance( SimParam,...
                            BattParam,...
                            InvParam,...
                            SimData,...
                            SimOut,OptSol.pvIndexes(i),...
                            OptSol.battIndexes(i));
    end
    
    function plotAvgPowerBalance_Callback(src, eventdata)
        i = h.SolutionList.Value;
        plot_average_power_balance( BattParam,...
                                    InvParam,...
                                    SimData,...
                                    SimOut,OptSol.pvIndexes(i),...
                                    OptSol.battIndexes(i));
    end


%% Help Functions =========================================================

% Populate Solution Space List --------------------------------------------
    function populate_solution_list
        
        get_solution_space
        
        solutionList = cell(1,3);
        for i = 1: length(OptSol.pvKw)
            solutionList{1,i} = ['Net present cost = '...
                                num2str(round(EcoOut.netPresentCost(...
                                                     OptSol.pvIndexes(i),...
                                                     OptSol.battIndexes(i))))...
                                ', Levelized cost of energy = ' ...
                                num2str(round(OptSol.levelizedCostsOfEnergy(i),3))... 
                                ', Loss of Load Probability = ' ...
                                num2str(round(OptSol.lossOfLoadProbabilities(i)*100,1))];
        end
        
        h.SolutionList.String = solutionList;
        
        
        
    end

    
    % Get solution space variables --------------------------------------------
    function get_solution_space
        % Find the solution space structs from the workspace.
        ws = evalin('base','who');
        for i = 1:length(ws)
            if strcmp(ws{i},'OptSol')
                OptSol = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'EcoOut')
                EcoOut = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'SimOut')
                SimOut = evalin('base',ws{i});
            end    
        end

    end
    
    function get_parameters
        % Find the solution space structs from the workspace.
        ws = evalin('base','who');
        for i = 1:length(ws)
            if strcmp(ws{i},'SimParam')
                SimParam = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'PvParam')
                PvParam = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'BattParam')
                BattParam = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'InvParam')
                InvParam = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'SimData')
                SimData = evalin('base',ws{i}); 
            elseif strcmp(ws{i}, 'EcoParam')
                EcoParam = evalin('base',ws{i});
            end    
        end
        
        
    end

end




function normalize_figure
    h.Title.Units = 'normalized';
    h.SolutionListHeader.Units = 'normalized';
    h.SolutionList.Units = 'normalized';
    h.SolutionInfoHeader.Units = 'normalized';
    h.SolutionInfoLeft.Units = 'normalized';
    h.SolutionInfoRight.Units = 'normalized';
    h.WindowChoiceBtnGroup.Units = 'normalized';
    h.WindowChoiceLeft.Units = 'normalized';
    h.WindowChoiceCenter.Units = 'normalized';
    h.WindowChoiceRight.Units = 'normalized';
    
end
