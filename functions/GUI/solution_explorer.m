function solution_explorer

%% Figure Contruction and Initialization ==================================
% Figure
lFigWidth = 700; lFigHeight = 800;
f = figure('Visible','off','Units','pixels',...
           'Position',[450,80,lFigWidth,lFigHeight],'menubar','none');

% Global Metrics
lMargin = 10;

% Global Variables
global h OptSol EcoOut SimOut...
       SimParam PvParam BattParam InvParam EcoParam SimData
global solutionList analysisOut
global iOptSol iPv jBatt

get_parameters
get_solution_space


% Title -------------------------------------------------------------------
lTitleHeight = 30; lTitleWidth = 300;
lTitleStartY = lFigHeight - lMargin - lTitleHeight;
h.Title = uicontrol(f,'Style','text','String','Solution Explorer',...
                   'Units','pixels','HorizontalAlignment','Left',...
                   'FontSize',16,...
                   'Position', [lMargin, lTitleStartY,...
                    lTitleWidth, lTitleHeight]);

% Solution Listbox Header -------------------------------------------------
lSolutionListHeaderHeight = 20; 
lSoltuionListHeaderWidth = lTitleWidth;
lSolutionListHeaderY = lTitleStartY - lMargin - lSolutionListHeaderHeight;
h.SolutionListHeader = uicontrol(f,'Style','text','String','Pick a Solution to Examine...',...
                       'Units','pixels','HorizontalAlignment','Left',...
                       'FontSize',10,...
                       'Position', [lMargin, lSolutionListHeaderY,...
                        lSoltuionListHeaderWidth, lSolutionListHeaderHeight]);

% Solution ListBox 
% displays the available solutions
lSolutionListHeight = 0.1*lFigHeight;
lSolutionListWidth = lFigWidth- lMargin*2;
lSolutionListY = lSolutionListHeaderY - lSolutionListHeight;
h.SolutionList = uicontrol(f, 'Style','listbox',...
                           'Callback',@solutionList_Callback,...
                           'Position', [lMargin, lSolutionListY,...
                                        lSolutionListWidth, lSolutionListHeight],...
                            'FontSize', 10);

iOptSol = h.SolutionList.Value;
iPv = OptSol.pvIndexes(iOptSol);
jBatt = OptSol.pvIndexes(iOptSol); 
                                    
% Solution Info Header ----------------------------------------------------
lSolutionInfoHeaderHeight = 20;
lSolutionInfoHeaderY = lSolutionListY - lSolutionListHeaderHeight - 3;
h.SolutionInfoHeader = uicontrol(f,'Style','text','String','Data Analysis Output:',...
                       'Units','pixels','HorizontalAlignment','Left',...
                       'FontSize',10,...
                       'Position', [lMargin, lSolutionInfoHeaderY,...
                        lSoltuionListHeaderWidth, lSolutionInfoHeaderHeight]);


% displays information about the chosen solutions
lSolutionInfoHeight = 0.4*lFigHeight;
lSolutionInfoWidth = lSolutionListWidth*0.5;
lSolutionInfoX1 = lMargin;
lSolutionInfoY = lSolutionInfoHeaderY - lSolutionInfoHeight -1;
h.SolutionInfoLeft = axes('Parent', f, 'Units','pixels',...
                      'XLim',[0 1],'Ylim',[0 1],'Box','on',...
                      'XTick',[],'YTick',[],...
                      'Position',[lSolutionInfoX1, lSolutionInfoY,...
                                  lSolutionInfoWidth,lSolutionInfoHeight]);
% Solution Info Window 2
% displays information about the chosen solutions
lSolutionInfoX2 = lMargin + lSolutionInfoWidth;
lSolutionInfoY = lSolutionInfoHeaderY - lSolutionInfoHeight -1;
h.SolutionInfoRight = axes('Parent', f, 'Units','pixels',...
                      'XLim',[0 1],'Ylim',[0 1],'Box','on',...
                      'XTick',[],'YTick',[],...
                      'Position',[lSolutionInfoX2, lSolutionInfoY,...
                                  lSolutionInfoWidth,lSolutionInfoHeight]);
                              
% Window Choice Panel -----------------------------------------------------
lRadioBtnHeight = 15;
lRadioBtnWidth = 150;
lWindowChoiceBtnGroupHeight = lRadioBtnHeight*3;
lWindowChoiceBtnGroupY = lSolutionInfoY - lWindowChoiceBtnGroupHeight-lMargin;
h.WindowChoiceBtnGroup = uibuttongroup(f,'Title','Choose Output Window',...
                                'Units','pixels',...
                                'Position',[lMargin,lWindowChoiceBtnGroupY ,...
                                lSolutionListWidth,lWindowChoiceBtnGroupHeight]);

lRadioBtnY = lWindowChoiceBtnGroupHeight - lRadioBtnHeight- lMargin*2;
lRadioBtnLeftX = lMargin;
h.WindowChoiceLeft = uicontrol(h.WindowChoiceBtnGroup, 'Style','radiobutton',...
                               'Units','pixels',...
                               'Position',[lRadioBtnLeftX,lRadioBtnY,...
                               lRadioBtnWidth,lRadioBtnHeight],...
                               'String', 'Output Left');
lRadioBtnCenterX = (lSolutionListWidth - lRadioBtnWidth)/2;
h.WindowChoiceNew = uicontrol(h.WindowChoiceBtnGroup, 'Style','radiobutton',...
                               'Units','pixels',...
                               'Position',[lRadioBtnCenterX,lRadioBtnY,...
                               lRadioBtnWidth,lRadioBtnHeight],...
                               'String', 'Output in New Window',...
                               'HorizontalAlignment','Center');
lRadioBtnRightX = lSolutionListWidth - lRadioBtnWidth + 50;
h.WindowChoiceRight = uicontrol(h.WindowChoiceBtnGroup, 'Style','radiobutton',...
                               'Units','pixels',...
                               'HorizontalAlignment','Right',...
                               'Position',[lRadioBtnRightX,lRadioBtnY,...
                               lRadioBtnWidth,lRadioBtnHeight],...
                               'String', 'Output Right');
                                                               
% Output Btns -------------------------------------------------------------
lOutputChoiceY = lWindowChoiceBtnGroupY - lSolutionListHeaderHeight - lMargin;
h.OutputChoiceHeader= uicontrol(f,'Style','text','String','Output Choices ',...
                       'Units','pixels','HorizontalAlignment','Left',...
                       'FontSize',10,...
                       'Position', [lMargin, lOutputChoiceY,...
                        lSoltuionListHeaderWidth, lSolutionListHeaderHeight]);

lBtnHeight = 30;
lOutputBtnWidth = (lFigWidth-lMargin*5)/4;
lOuputBtnY = lOutputChoiceY - lMargin - lBtnHeight;
lOutputGeneralInfoX = lMargin;
h.OutputGeneralInfo = uicontrol(f,'Style','pushbutton','String','General Info',...
                                'Units','pixels','HorizontalAlignment','Left',...
                                'Position', [lOutputGeneralInfoX, lOuputBtnY,...
                                lOutputBtnWidth, lBtnHeight],...
                                'Callback',@outputGeneralInfo_Callback);
lAveragesBtnX = lOutputGeneralInfoX + lMargin + lOutputBtnWidth;
h.OutputAverages = uicontrol(f,'Style','pushbutton','String','Averages',...
                               'Units','pixels','HorizontalAlignment','Left',...
                               'Position', [lAveragesBtnX, lOuputBtnY,...
                                lOutputBtnWidth, lBtnHeight],...
                                'Callback',@outputAverages_Callback);
lWorstCaseBtnX = lAveragesBtnX + lMargin + lOutputBtnWidth;
h.OutputWorstCase = uicontrol(f,'Style','pushbutton','String','Worst-Case',...
                                'Units','pixels','HorizontalAlignment','Left',...
                                'Position', [lWorstCaseBtnX, lOuputBtnY,...
                                lOutputBtnWidth, lBtnHeight]);
lBiomassConsumptionBtnX = lWorstCaseBtnX + lMargin + lOutputBtnWidth;
h.OutputWorstCase = uicontrol(f,'Style','pushbutton','String','Biomass Consumption',...
                                'Units','pixels','HorizontalAlignment','Left',...
                                'Position', [lBiomassConsumptionBtnX, lOuputBtnY,...
                                lOutputBtnWidth, lBtnHeight]);



% Plotting Btns -----------------------------------------------------------
lPlottingChoiceY = lOuputBtnY - lSolutionListHeaderHeight - lMargin;
h.PlottingChoiceHeader= uicontrol(f,'Style','text','String','Plotting Choices',...
                                   'Units','pixels','HorizontalAlignment','Left',...
                                   'FontSize',10,...
                                   'Position', [lMargin, lPlottingChoiceY,...
                                    lSoltuionListHeaderWidth, lSolutionListHeaderHeight]);

lPlottingBtnWidth = (lFigWidth-lMargin*4)/3;
lPlottingBtnY = lPlottingChoiceY - lMargin - lBtnHeight;
lAveragesBtnX = lMargin;
h.PlotStateOfCharge = uicontrol(f,'Style','pushbutton','String','State Of Charge',...
                               'Units','pixels','HorizontalAlignment','Left',...
                               'Position', [lAveragesBtnX, lPlottingBtnY,...
                                lPlottingBtnWidth, lBtnHeight]);
lWorstCaseBtnX = lAveragesBtnX + lMargin + lPlottingBtnWidth;
h.PlotPowerBalance = uicontrol(f,'Style','pushbutton','String','Power Balance',...
                                'Units','pixels','HorizontalAlignment','Left',...
                                'Position', [lWorstCaseBtnX, lPlottingBtnY,...
                                lPlottingBtnWidth, lBtnHeight],...
                                'Callback', @plotPowerBalance_Callback);
lBiomassConsumptionBtnX = lWorstCaseBtnX + lMargin + lPlottingBtnWidth;
h.PlotAvgPowerBalance = uicontrol(f,'Style','pushbutton','String','Average Day Power Balance',...
                                'Units','pixels','HorizontalAlignment','Left',...
                                'Position', [lBiomassConsumptionBtnX, lPlottingBtnY,...
                                lPlottingBtnWidth, lBtnHeight],...
                                'Callback', @plotAvgPowerBalance_Callback);

% Menu Bar Button ---------------------------------------------------------
lActivateMenuBarBtnWidth = 100;
h.ActivateMenuBarBtn = uicontrol('Style','pushbutton',...
                                 'Position',[lMargin,lMargin,...
                                 lActivateMenuBarBtnWidth,lBtnHeight*0.75],...
                                 'Callback',@activateMenuBarBtn_Callback,...
                                 'String','Menu Bar On/Off');
                            
populate_solution_list
normalize_figure

f.Visible = 'on';

%% Callbacks ==============================================================

    function solutionList_Callback(src,eventdata)
       iOptSol = src.Value;
       iPv = OptSol.pvIndexes(iOptSol);
       jBatt = OptSol.pvIndexes(iOptSol); 
        
    end

    function outputGeneralInfo_Callback(src, eventdata)
        
        OutputWindow = get_output_window_textbox;
        cla(OutputWindow)
        
        downtime = length(find(SimOut.lossOfLoad(:,iPv,jBatt)));
        % first find all the indexes with LL occurence, then find the
        % indexes of lost load that are next to eachother, but more than
        % one hour away. This is a different occurence, count these and get
        % downtime occurences
        downtimeOccurences = length(find(...
                            diff(find(SimOut.lossOfLoad(:,iPv,jBatt))) > 2));
        loadServed = round((1 - SimOut.lossOfLoadProbability(iPv,jBatt))...
                   * sum(SimData.load));
        
                        
                        
        output = {...
            ['Solution No.' num2str(iOptSol) ', General Info:'], ...
            '------------------------------',...
            ' ',...
            ['PV iteration = ' num2str(iPv)],...
            ['Battery iteration = ' num2str(jBatt)],...
            ' ',...
            ['PV kW = ' num2str(OptSol.pvKw(iOptSol))], ...
            ['Battery kWh = ' num2str(OptSol.battKwh(iOptSol))],...
            ' ',...
            ['Total Irradiation Absorbed = ' ...
            num2str(round(sum(SimOut.pvPowerAbsorbed(:,iPv))))],...
            ['Total Unused Absorbed Irradiation = ' ...
            num2str(round(sum(SimOut.pvPowerAbsorbedUnused(:,iPv,jBatt))))],...
            '--',...
            ' ',...
            ['Microgrid Downtime = ' num2str(downtime) ' [h]'],...
            ['Occurences of Downtime = ' num2str(downtimeOccurences)],...
            ' ',...
            ['Total Lost Load = ' num2str(round(SimOut.lossOfLoadTot(iPv,jBatt))) ...
            ' [kWh]'],...
            ['Total Load Served ' num2str(round(loadServed)) ' [kWh]']};
                       
        text(10,170,output,...
            'Interpreter','latex','Units','pixels',...
            'Parent',OutputWindow);

    end
    
    function outputAverages_Callback(src,eventdata)
        
        OutputWindow = get_output_window_textbox;
        cla(OutputWindow)
        
        downtime = length(find(SimOut.lossOfLoad(:,iPv,jBatt)));
        %explained in the output general info callback
        downtimeOccurences = length(find(...
                    diff(find(SimOut.lossOfLoad(:,iPv,jBatt))) > 2));
                
        dailyAverageIrradiationAbsorbed = round(sum(SimOut.pvPowerAbsorbed(:,iPv))...
                                        /(SimData.nHours/24));
        dailyAverageIrradiationAbsorbedUnused = round(sum(...
                                                SimOut.pvPowerAbsorbedUnused(:,iPv,jBatt))...
                                                /(SimData.nHours/24));
        averageDowntimeHours = floor(downtime / downtimeOccurences);
        averageDowntimeMinutes = round(((downtime / downtimeOccurences)...
                               - averageDowntimeHours)*60);
        averageLostLoadOccurenceKwh = round(SimOut.lossOfLoadTot(iPv,jBatt) ...
                                    / downtimeOccurences);
        dailyAverageDowntimeHours = floor(downtime / (SimData.nHours/24));
        dailyAverageDowntimeMinutes = round((downtime / (SimData.nHours/24)...
                                    - dailyAverageDowntimeHours)*60);
        dailyAverageLostLoadKwh = round(SimOut.lossOfLoadTot(iPv,jBatt)...
                                / downtimeOccurences);
        dailyAverageSuppliedLoad = round(((1 - SimOut.lossOfLoadProbability(iPv,jBatt))...
                   * sum(SimData.load))/(SimData.nHours/24));
             
        
        output = {...
            ['Solution No.' num2str(iOptSol) ', Averages:'], ...
            '------------------------------',...
            ' ',...
            ['Daily Average Irradiation Absorbed = ' ...
            num2str(dailyAverageIrradiationAbsorbed)],...
            ['Daily Average Irradiation Unused = ' ...
            num2str(dailyAverageIrradiationAbsorbedUnused)],...
            ' ',...
            'Average Downtime Lenght : ',...
            [num2str(averageDowntimeHours) ' hours, ' ...
            num2str(averageDowntimeMinutes) ' minutes'], ...
            ' ',...
            ['Average Lost Load during Downtime = '...
                                num2str(averageLostLoadOccurenceKwh) ' [kWh]'],...
            ' ',...
            '--',...
            ' ',...
            'Daily Average Downtime : ',...
            [num2str(dailyAverageDowntimeHours) ' hours' ...
            num2str(dailyAverageDowntimeMinutes) ' minutes'],...
            ' ',...
            ['Daily Average Loss of Load = ' num2str(dailyAverageLostLoadKwh) ' [kWh]']...
            ['Daily Average Supplied Load = ' num2str(dailyAverageSuppliedLoad) ' [kWh]']};
        
        text(10,170,output,...
            'Interpreter','latex','Units','pixels',...
            'Parent',OutputWindow);

    end
    
    function ouputWorstCase_Callback(src,eventdata)
        
        OutputWindow = get_output_window_textbox;
        cla(OutputWindow)
                 
        [longestLossOfLoad, iLongestLossOfLoad] = get_longest_loss_of_load;
%         [worstIrradiation, worstConsumption, worstLossOfLoad]...
%         = get_worst_case_periods;
%         
        
        output = {...
        ['Solution No.' num2str(iOptSol) ', Averages:'], ...
        '------------------------------',...
        ' ',...
        ['Daily Average Irradiation Absorbed = ' ...
        num2str(dailyAverageIrradiationAbsorbed)],...
        ['Daily Average Irradiation Unused = ' ...
        num2str(dailyAverageIrradiationAbsorbedUnused)],...
        ' ',...
        'Average Downtime Lenght : ',...
        [num2str(averageDowntimeHours) ' hours, ' ...
        num2str(averageDowntimeMinutes) ' minutes'], ...
        ' ',...
        ['Average Lost Load during Downtime = '...
                            num2str(averageLostLoadOccurenceKwh) ' [kWh]'],...
        ' ',...
        '--',...
        ' ',...
        'Daily Average Downtime : ',...
        [num2str(dailyAverageDowntimeHours) ' hours' ...
        num2str(dailyAverageDowntimeMinutes) ' minutes'],...
        ' ',...
        ['Daily Average Lost Load = ' num2str(dailyAverageLostLoadKwh) ' [kWh]']...
        ['Daily Average Supplied Load = ' num2str(dailyAverageSuppliedLoad) ' [kWh]']};
        
        
        text(10,170,output,...
            'Interpreter','latex','Units','pixels',...
            'Parent',OutputWindow);

        
        
    end
    

    function plotPowerBalance_Callback(src, eventdata)
        i = h.SolutionList.Value;
        plot_power_balance( SimParam,...
                            BattParam,...
                            InvParam,...
                            SimData,...
                            SimOut,OptSol.pvIndexes(i),...
                            OptSol.battIndexes(i));
    end
    
    function plotAvgPowerBalance_Callback(src, eventdata)
        i = h.SolutionList.Value;
        plot_average_power_balance( BattParam,...
                                    InvParam,...
                                    SimData,...
                                    SimOut,OptSol.pvIndexes(i),...
                                    OptSol.battIndexes(i));
    end
    
    
    function activateMenuBarBtn_Callback(src,eventdata) 
        if strcmp(f.MenuBar,'figure');
            f.MenuBar = 'none';
        else
            f.MenuBar = 'figure';
        end
    end

%% Help Functions =========================================================

% Populate Solution Space List --------------------------------------------
    function populate_solution_list
        
        solutionList = cell(1,3);
        for i = 1: length(OptSol.pvKw)
            solutionList{1,i} = [num2str(i) ': Net present cost = '...
                                num2str(round(EcoOut.netPresentCost(...
                                                     OptSol.pvIndexes(i),...
                                                     OptSol.battIndexes(i))))...
                                ', Levelized cost of energy = ' ...
                                num2str(round(OptSol.levelizedCostsOfEnergy(i),3))... 
                                ', Loss of Load Probability = ' ...
                                num2str(round(OptSol.lossOfLoadProbabilities(i)*100,1))];
        end
        
        h.SolutionList.String = solutionList;
        
        
        
    end

    
    % Get solution space variables --------------------------------------------
    function get_solution_space
        % Find the solution space structs from the workspace.
        ws = evalin('base','who');
        for i = 1:length(ws)
            if strcmp(ws{i},'OptSol')
                OptSol = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'EcoOut')
                EcoOut = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'SimOut')
                SimOut = evalin('base',ws{i});
            end    
        end

    end
    
    function get_parameters
        % Find the solution space structs from the workspace.
        ws = evalin('base','who');
        for i = 1:length(ws)
            if strcmp(ws{i},'SimParam')
                SimParam = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'PvParam')
                PvParam = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'BattParam')
                BattParam = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'InvParam')
                InvParam = evalin('base',ws{i});
            elseif strcmp(ws{i}, 'SimData')
                SimData = evalin('base',ws{i}); 
            elseif strcmp(ws{i}, 'EcoParam')
                EcoParam = evalin('base',ws{i});
            end    
        end
        
        
    end
    
    function normalize_figure
        h.Title.Units = 'normalized';
        h.SolutionListHeader.Units = 'normalized';
        h.SolutionList.Units = 'normalized';
        h.SolutionInfoHeader.Units = 'normalized';
        h.SolutionInfoLeft.Units = 'normalized';
        h.SolutionInfoRight.Units = 'normalized';
        h.WindowChoiceBtnGroup.Units = 'normalized';
        h.WindowChoiceLeft.Units = 'normalized';
        h.WindowChoiceCenter.Units = 'normalized';
        h.WindowChoiceRight.Units = 'normalized';
    end
    
    
    function OutputWindow = get_output_window_textbox
        if h.WindowChoiceLeft.Value
            OutputWindow = h.SolutionInfoLeft;
        elseif  h.WindowChoiceRight.Value
            OutputWindow = h.SolutionInfoRight;
        else
            OutputWindow = new_textbox;
        end
    end
    
    function OutputWindow = get_output_window_figure
        if h.WindowChoiceLeft.Value
            OutputWindow = h.SolutionInfoLeft;
        elseif  h.WindowChoiceRight.Value
            OutputWindow = h.SolutionInfoRight;
        else
            OutputWindow = figure;
        end
    end
    
    function [longestLossOfLoad, iLongestLossOfLoad]...
             = get_longest_loss_of_load       
        dLossOfLoad = diff(find(SimOut.lossOfLoad(:,iPv,jBatt)));
        longestLossOfLoad = 0;
        counter = 0;
        for i = 1:length(dLossOfLoad)
            counter = counter + 1;
            if dLossOfLoad(i)> 1
                if longestLossOfLoad < counter
                    longestLossOfLoad = counter;
                    iLongestLossOfLoad = i;
                end
                counter = 0;
            end
        end
    end
    
%     function [WorstIrradiation, WorstConsumption, WorstLossOfLoad]...
%               = get_worst_case_periods
%           
%           WorstIrradiation.time.month = ''
%           
%     end
    
end






